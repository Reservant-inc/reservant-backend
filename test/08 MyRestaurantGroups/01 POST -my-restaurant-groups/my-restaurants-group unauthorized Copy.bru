meta {
  name: my-restaurants-group unauthorized Copy
  type: http
  seq: 3
}

post {
  url: {{host}}/my-restaurant-groups
  body: json
  auth: bearer
}

auth:bearer {
  token: {{BOKEmployee}}
}

body:json {
  {
    "name": "{{groupName}}",
    "restaurantIds": [
      {{randomRestaurantId}}
    ]
  }
  
}

script:pre-request {
  function generateRandomString(length) {
      let result = '';
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      const charactersLength = characters.length;
      for (let i = 0; i < length; i++) {
          result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
  }
  
  const randomName = "Grupa_" + generateRandomString(10);
  bru.setEnvVar("groupName", randomName);
  
  
  // Pobierz listę restaurantIds ze zmiennej środowiskowej
  var restaurantIds = bru.getEnvVar("restaurantIds");
  
  // Upewnij się, że restaurantIds to tablica
  if (restaurantIds && typeof restaurantIds === 'string') {
      restaurantIds = JSON.parse(restaurantIds);
  }
  
  // Sprawdź, czy lista nie jest pusta
  if (restaurantIds && restaurantIds.length > 0) {
      // Losuj jeden element z listy
      var randomRestaurantId = restaurantIds[Math.floor(Math.random() * restaurantIds.length)];
      
      // Zapisz wylosowany restaurantId do zmiennej środowiskowej
      bru.setEnvVar("randomRestaurantId", randomRestaurantId);
      console.log("Random restaurantId selected:", randomRestaurantId);
  } else {
      console.log("No restaurantIds available.");
  }
  
}

tests {
  test("Status code is 403", function () {
      expect(res.getStatus()).to.equal(403);
  });
}
