meta {
  name: validate-first-step invalid group
  type: http
  seq: 2
}

post {
  url: {{host}}/my-restaurants/validate-first-step
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{$randomCompanyName}}",
    "nip": "{{generated_nip}}",
    "restaurantType": "{{randomRestaurantType}}",
    "address": "{{$randomStreetAddress}}",
    "postalIndex": "{{randomPostalCode}}",
    "city": "{{randomCity}}",
    "groupId": 0
  }
}

script:pre-request {
  function generateNIP() {
      var weights = [6, 5, 7, 2, 3, 4, 5, 6, 7];
      
      // Generate the first 9 digits of NIP
      var nip_base = [];
      for (var i = 0; i < 9; i++) {
          nip_base.push(Math.floor(Math.random() * 10));
      }
      
      // Calculate the control digit
      var control_sum = 0;
      for (var i = 0; i < 9; i++) {
          control_sum += nip_base[i] * weights[i];
      }
      var control_digit = control_sum % 11;
      if (control_digit == 10) {
          control_digit = 0;
      }
      
      nip_base.push(control_digit);
      return nip_base.join('');
  }
  
  // Generate NIP and set it as a variable
  var nip = generateNIP();
  // postman.setEnvironmentVariable("generated_nip", nip);
  
  
  function generatePostalCode() {
      function getRandomDigit() {
          return Math.floor(Math.random() * 10);
      }
  
      var part1 = getRandomDigit().toString() + getRandomDigit().toString();
      var part2 = getRandomDigit().toString() + getRandomDigit().toString() + getRandomDigit().toString();
      
      return part1 + '-' + part2;
  }
  
  //Random Restaurant Tag
  const choices = ["Asian", "Italian", "OnSite", "Tag1", "Tag2", "Takeaway"];
  
  
  function getRandomChoice(arr) {
      const randomIndex = Math.floor(Math.random() * arr.length);
      return arr[randomIndex];
  }
  const randomChoice = getRandomChoice(choices);
  
  bru.setEnvVar("randomRestaurantTag", randomChoice);
  
  //Random Restaurant type
  const choices2 = ["Restaurant", "Bar"];
  
  const randomChoice2 = getRandomChoice(choices2);
  
  bru.setEnvVar("randomRestaurantType", randomChoice2);
  
  //Random Deposit
  function getRandomDeposit(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  
  // Losowy wybór dla ReservationDeposit
  const randomDeposit = getRandomDeposit(0, 500);
  
  // Zapisanie wartości jako zmiennej w środowisku Postmana
  bru.setEnvVar("ReservationDeposit", randomDeposit);
  
  // RandomCity
  const cities = [
      "Warszawa",
      "Kraków",
      "Łódź",
      "Wrocław",
      "Poznań",
      "Gdańsk",
      "Szczecin",
      "Bydgoszcz",
      "Lublin",
      "Białystok",
      "Katowice",
      "Gdynia",
      "Częstochowa",
      "Radom",
      "Sosnowiec"
  ];
  
  
  function getRandomCity(arr) {
      const randomIndex = Math.floor(Math.random() * arr.length);
      return arr[randomIndex];
  }
  
  
  const randomCity = getRandomCity(cities);
  
  // Zapisanie miasta jako zmiennej w środowisku Postmana
  bru.setEnvVar("randomCity", randomCity);
  
  //Random Postal code
  function getRandomDigit() {
      return Math.floor(Math.random() * 10);
  }
  
  // Funkcja generująca polski kod pocztowy w formacie xx-xxx
  function generateRandomPostalCode() {
      let postalCode = '';
      for (let i = 0; i < 2; i++) {
          postalCode += getRandomDigit();
      }
      postalCode += '-';
      for (let i = 0; i < 3; i++) {
          postalCode += getRandomDigit();
      }
      return postalCode;
  }
  
  // Losowy kod pocztowy
  const randomPostalCode = generateRandomPostalCode();
  
  // Zapisanie kodu pocztowego jako zmiennej w środowisku Postmana
  bru.setEnvVar("randomPostalCode", randomPostalCode);
  
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla nieistniejącego groupId
  test("Status code is 400 when 'groupId' does not exist", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for non-existent 'groupId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errorCodes'
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla nieistniejącego 'groupId'
  test("Response contains error message for non-existent 'groupId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla 'groupId'
      expect(jsonData.errors).to.have.property('groupId');
      expect(jsonData.errors.groupId[0]).to.eql("Group with ID 0 not found");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu 'NotFound' dla nieistniejącego 'groupId'
  test("Response contains error code 'NotFound' for non-existent 'groupId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu dla 'groupId'
      expect(jsonData.errorCodes).to.have.property('groupId');
      expect(jsonData.errorCodes.groupId[0]).to.eql("NotFound");
  });
  
}
