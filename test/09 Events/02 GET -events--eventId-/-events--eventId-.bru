meta {
  name: -events--eventId-
  type: http
  seq: 1
}

get {
  url: {{host}}/events/:eventId
  body: none
  auth: none
}

params:path {
  eventId: {{randomEventId}}
}

script:pre-request {
  // Pobierz listę eventIds z środowiska
  var eventIdsList = bru.getEnvVar("eventIdsList");
  
  // Sprawdź, czy lista eventIdsList nie jest pusta
  if (eventIdsList && eventIdsList.length > 0) {
      // Parsuj listę (jeśli została zapisana jako string JSON)
      eventIdsList = JSON.parse(eventIdsList);
      
      // Losuj indeks z listy
      var randomIndex = Math.floor(Math.random() * eventIdsList.length);
      
      // Pobierz losowe eventId
      var randomEventId = eventIdsList[randomIndex];
      
      // Zapisz losowe eventId do środowiska
      bru.setEnvVar("randomEventId", randomEventId);
      
      console.log("Losowy eventId: " + randomEventId);
  } else {
      console.log("Lista eventIdsList jest pusta lub nie istnieje");
  }
  
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is not empty", function () {
      expect(res.getBody()?.toString()).not.to.be.empty;
  });
  
  test("Response has a JSON body", function () {
  //     expect(pm.response.headers.get("Content-Type")).to.include("application/json");
  });
  
  test("Response Content-Type is application/json", function () {
  //     expect(pm.response.headers.get('Content-Type')).to.include('application/json');
  });
  
  const response = res.getBody();
  
  test("Response has correct output types", function () {
      expect(response).to.have.property("eventId").that.is.a("number");
      expect(response).to.have.property("createdAt").that.is.a("string");
      expect(response).to.have.property("description").that.is.a("string");
      expect(response).to.have.property("time").that.is.a("string");
      expect(response).to.have.property("mustJoinUntil").that.is.a("string");
      expect(response).to.have.property("creatorId").that.is.a("string");
      expect(response).to.have.property("creatorFullName").that.is.a("string");
      expect(response).to.have.property("restaurantId").that.is.a("number");
      expect(response).to.have.property("restaurantName").that.is.a("string");
      expect(response).to.have.property("visitId");
      expect(response.visitId === null || typeof response.visitId === 'number').to.be.true;
      expect(response).to.have.property("interested").that.is.an("array");
  });
  
  response.interested.forEach((item, index) => {
      test(`interested user has correct fields and types`, function () {
          expect(item).to.have.property("userId").that.is.a("string");
          expect(item).to.have.property("firstName").that.is.a("string");
          expect(item).to.have.property("lastName").that.is.a("string");
      });
  });
  
}
