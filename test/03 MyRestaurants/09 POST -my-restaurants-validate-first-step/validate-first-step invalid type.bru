meta {
  name: validate-first-step invalid type
  type: http
  seq: 6
}

post {
  url: {{host}}/my-restaurants/validate-first-step
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{randomCompanyName}}",
    "nip": "{{randomNIP}}",
    "restaurantType": "XD",
    "address": "{{randomStreetAddress}}",
    "postalIndex": "{{randomPostalCode}}",
    "city": "{{randomCity}}",
    "groupId": {{randomRestaurantGroupId}}
  }
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla niepoprawnego restaurantType
  test("Status code is 400 when 'restaurantType' is invalid", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for invalid 'restaurantType'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla niepoprawnego 'restaurantType'
  test("Response contains error message for invalid 'restaurantType'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla '$.restaurantType'
      expect(jsonData.errors).to.have.property('$.restaurantType');
      expect(jsonData.errors["$.restaurantType"][0]).to.include("The JSON value could not be converted to Reservant.Api.Models.Enums.RestaurantType");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera błąd dla pola 'dto'
  test("Response contains error for 'dto' field", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera błąd dla 'dto'
      expect(jsonData.errors).to.have.property('dto');
      expect(jsonData.errors.dto[0]).to.include("The dto field is required.");
  });
  
}
