meta {
  name: menus invalid format date
  type: http
  seq: 14
}

post {
  url: {{host}}/menus
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "restaurantId": {{randomRestaurantId}},
    "name": "{{$randomStreetName}}",
    "alternateName": "{{$randomStreetName}}",
    "menuType": "{{randomMenuType}}",
    "dateFrom": "01.01.2024",
    "dateUntil": "01.01.2024",
    "photo": "test-jd.png"
  }
  
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400 for invalid date format", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // 2. Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for invalid date format", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('req');
      expect(jsonData.errors).to.have.property('$.dateFrom');
  });
  
  // 3. Sprawdzenie, czy odpowiedź zawiera odpowiedni błąd dla niepoprawnego formatu daty
  test("Response contains error message for invalid date format", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla niepoprawnego formatu daty
      expect(jsonData.errors['$.dateFrom'][0]).to.include("The JSON value could not be converted to System.DateOnly");
  });
  
}
