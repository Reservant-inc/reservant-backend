meta {
  name: create-a-new-restaurant nip Error
  type: http
  seq: 4
}

post {
  url: {{host}}/my-restaurants
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{randomCompanyName}}",
    "nip": "1231264551",  // NIP ma niepoprawny format
    "restaurantType": "{{randomRestaurantType}}",
    "address": "{{randomStreetAddress}}",
    "postalIndex": "{{randomPostalCode}}",
    "city": "{{randomCity}}",
    "rentalContract": "test-jd.pdf",
    "alcoholLicense": "test-jd.pdf",
    "businessPermission": "test-jd.pdf",
    "idCard": "test-jd.pdf",
    "logo": "test-jd.png",
    "description": "{{randomLoremSentence}}",
    "reservationDeposit": {{randomDeposit}},
    "provideDelivery": {{randomBoolean}},
    "maxReservationDurationMinutes": {{randomDuration}},
    "openingHours": [
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      }
    ],
    "tags": [
      "{{randomRestaurantTag}}"
    ],
    "photos": [
      "test-jd.png"
    ],
    "location": {
      "latitude": {{randomLatitude}},
      "longitude": {{randomLongitude}}
    }
  }
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy 'nip' ma niepoprawny format i zwraca odpowiedni błąd
  test("nip must be valid", function () {
      var responseData = res.getBody();
  
      expect(responseData.errors).to.have.property('nip');
      expect(responseData.errors.nip[0]).to.include("Must be a valid NIP");
  
      expect(responseData.errorCodes).to.have.property('nip');
      expect(responseData.errorCodes.nip[0]).to.include("Nip");
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
