meta {
  name: validate-first-step invalid postal
  type: http
  seq: 4
}

post {
  url: {{host}}/my-restaurants/validate-first-step
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{randomCompanyName}}",
    "nip": "{{randomNIP}}",
    "restaurantType": "{{randomRestaurantType}}",
    "address": "{{randomStreetAddress}}",
    "postalIndex": "00000",
    "city": "{{randomCity}}",
    "groupId": 0
  }
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla niepoprawnego postalIndex
  test("Status code is 400 when 'postalIndex' is invalid", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for invalid 'postalIndex'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errorCodes'
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla niepoprawnego 'postalIndex'
  test("Response contains error message for invalid 'postalIndex'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla 'postalIndex'
      expect(jsonData.errors).to.have.property('postalIndex');
      expect(jsonData.errors.postalIndex[0]).to.eql("Must be a valid postal code");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu dla niepoprawnego 'postalIndex'
  test("Response contains error code 'PostalCode' for 'postalIndex'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu dla 'postalIndex'
      expect(jsonData.errorCodes).to.have.property('postalIndex');
      expect(jsonData.errorCodes.postalIndex[0]).to.eql("PostalCode");
  });
  
}
