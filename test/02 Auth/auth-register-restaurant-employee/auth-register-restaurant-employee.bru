meta {
  name: auth-register-restaurant-employee
  type: http
  seq: 1
}

post {
  url: {{host}}/auth/register-restaurant-employee
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "login": "{{randomLogin}}",
    "firstName": "{{randomFirstName}}",
    "lastName": "{{randomLastName}}",
     "phoneNumber": {
      "code": "{{randomCountryCode}}",
      "number": "{{randomPhoneNumber}}"
    },
    "birthDate": "{{randomBirthDate}}",
    "password": "{{randomPassword}}"
  }
  
}

tests {
  // Test to check if the status code is 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Test to check if the response has a JSON body
  test("Response has a JSON body", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // Parsing the request and response body
  var requestData = req.getBody();
  var responseData = res.getBody();
  
  // Check that each expected field is present and non-empty
  test("firstName is present and not empty", function () {
      expect(requestData).to.have.property('firstName');
      expect(requestData.firstName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("lastName is present and not empty", function () {
      expect(requestData).to.have.property('lastName');
      expect(requestData.lastName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("login is present and not empty", function () {
      expect(requestData).to.have.property('login');
      expect(requestData.login).to.be.a('string').and.to.not.be.empty;
  });
  
  test("phoneNumber is present and valid", function () {
      expect(requestData).to.have.property('phoneNumber');
      expect(requestData.phoneNumber).to.be.an('object');
      expect(requestData.phoneNumber).to.have.property('code').that.is.a('string').and.to.not.be.empty;
      expect(requestData.phoneNumber).to.have.property('number').that.is.a('string').and.to.not.be.empty;
  });
  
  test("birthDate is present and valid", function () {
      expect(requestData).to.have.property('birthDate');
      expect(requestData.birthDate).to.be.a('string').and.to.not.be.empty;
      // Optionally, you can add date format validation here
  });
  
  test("Password is present and not empty", function () {
      expect(requestData).to.have.property('password');
      expect(requestData.password).to.be.a('string').and.to.not.be.empty;
  });
  
  // Validate that the response data structure matches the request data structure
  test("Response structure is valid", function () {
      // Check if the response contains the 'userId' property
      expect(responseData).to.have.property('userId');
      expect(responseData.userId).to.be.a('string');
  
      // Check if the response contains the 'login' property
      expect(responseData).to.have.property('login');
      expect(responseData.login).to.be.a('string');
  
      // Check if the response contains the 'roles' property
      expect(responseData).to.have.property('roles');
      expect(responseData.roles).to.be.an('array');
  
      // Validate that the 'roles' array contains the expected role 'RestaurantEmployee'
      expect(responseData.roles).to.include.members(["RestaurantEmployee"]);
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
  if (jsonData.userId) {
      bru.setEnvVar("userId", jsonData.userId);
      console.log("UserId saved to environment: " + jsonData.userId);
  } else {
      console.log("UserId not found in response.");
  }
}
