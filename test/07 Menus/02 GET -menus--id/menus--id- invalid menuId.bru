meta {
  name: menus--id- invalid menuId
  type: http
  seq: 3
}

get {
  url: {{host}}/menus/:id
  body: none
  auth: bearer
}

params:path {
  id: 0
}

auth:bearer {
  token: {{JD}}
}

script:pre-request {
  // Pobieranie listy menuIds z środowiska
  var menuIds = JSON.parse(bru.getEnvVar("menuIds"));
  
  // Sprawdzenie, czy lista menuIds jest prawidłowa i zawiera elementy
  if (menuIds && Array.isArray(menuIds) && menuIds.length > 0) {
      // Losowanie jednego menuId z listy
      var randomIndex = Math.floor(Math.random() * menuIds.length);
      var randomMenuId = menuIds[randomIndex];
  
      // Zapisywanie wylosowanego menuId do środowiska
      bru.setEnvVar("randomMenuId", randomMenuId);
  
      console.log("Wylosowane menuId:", randomMenuId);
  } else {
      console.error("Lista menuIds jest pusta lub nie została znaleziona.");
  }
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla nieistniejącego menuId
  test("Status code is 400 when 'menuId' does not exist", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for non-existent 'menuId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errorCodes'
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla nieistniejącego 'menuId'
  test("Response contains error message for non-existent 'menuId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla nieistniejącego 'menuId'
      expect(jsonData.errors[""]).to.include("Menu with ID 0 not found.");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu 'NotFound' dla nieistniejącego 'menuId'
  test("Response contains error code 'NotFound' for non-existent 'menuId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu dla nieistniejącego 'menuId'
      expect(jsonData.errorCodes[""]).to.include("NotFound");
  });
  
}
