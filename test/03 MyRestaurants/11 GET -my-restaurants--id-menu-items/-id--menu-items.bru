meta {
  name: -id--menu-items
  type: http
  seq: 1
}

get {
  url: {{host}}/my-restaurants/:id/menu-items
  body: json
  auth: bearer
}

params:path {
  id: {{firstRestaurantId}}
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is not empty", function () {
      expect(res.getBody()?.toString()).not.to.be.empty;
  });
  
  test("Response Content-Type is application/json", function () {
  //     expect(pm.response.headers.get('Content-Type')).to.include('application/json');
  });
  
  test("Response is an array", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.be.an('array');
  });
  
  test("Menu item structure", function () {
      var jsonData = res.getBody();
      jsonData.forEach(item => {
          expect(item).to.have.property('menuItemId');
          expect(item).to.have.property('price');
          expect(item).to.have.property('name');
          expect(item).to.have.property('alternateName');
          expect(item).to.have.property('alcoholPercentage');
          expect(item).to.have.property('photo');
      });
  });
  
  test("Property types are correct", function () {
      var jsonData = res.getBody();
      jsonData.forEach(item => {
          expect(item.menuItemId).to.be.a('number');
          expect(item.price).to.be.a('number');
          expect(item.name).to.be.a('string');
          expect(item.alternateName).to.satisfy((value) => value === null || typeof value === 'string');
          expect(item.alcoholPercentage).to.satisfy((value) => value === null || typeof value === 'number');
          expect(item.photo).to.be.a('string');
      });
  });
  
}
