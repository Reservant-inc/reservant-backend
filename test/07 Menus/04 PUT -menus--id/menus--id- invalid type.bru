meta {
  name: menus--id- invalid type
  type: http
  seq: 11
}

put {
  url: {{host}}/menus/:menuId
  body: json
  auth: bearer
}

params:path {
  menuId: {{randomMenuId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{$randomStreetName}}",
    "alternateName": "{{$randomStreetName}}",
    "menuType": "InvalidType",
    "dateFrom": "{{formattedDate}}",
    "dateUntil": "{{randomFutureDate}}",
     "photo": "test-jd.png"
  }
}

script:pre-request {
  // Pobieranie listy menuIds z środowiska
  var menuIds = JSON.parse(bru.getEnvVar("menuIds"));
  
  // Sprawdzenie, czy lista menuIds jest prawidłowa i zawiera elementy
  if (menuIds && Array.isArray(menuIds) && menuIds.length > 0) {
      // Losowanie jednego menuId z listy
      var randomIndex = Math.floor(Math.random() * menuIds.length);
      var randomMenuId = menuIds[randomIndex];
  
      // Zapisywanie wylosowanego menuId do środowiska
      bru.setEnvVar("randomMenuId", randomMenuId);
  
      console.log("Wylosowane menuId:", randomMenuId);
  } else {
      console.error("Lista menuIds jest pusta lub nie została znaleziona.");
  }
  
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400 for invalid 'menuType'", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // 2. Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for invalid 'menuType'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('request');
      expect(jsonData.errors).to.have.property('$.menuType');
  });
  
  // 3. Sprawdzenie, czy odpowiedź zawiera odpowiedni błąd dla nieprawidłowego 'menuType'
  test("Response contains error message for invalid 'menuType'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla nieprawidłowego 'menuType'
      expect(jsonData.errors['$.menuType'][0]).to.include("The JSON value could not be converted to Reservant.Api.Models.Enums.MenuType");
  });
  
}
