meta {
  name: my-restaurants-group
  type: http
  seq: 1
}

post {
  url: {{host}}/my-restaurant-groups
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{groupName}}",
    "restaurantIds": [
      {{randomRestaurantId}}
    ]
  }
  
}

script:pre-request {
  function generateRandomString(length) {
      let result = '';
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      const charactersLength = characters.length;
      for (let i = 0; i < length; i++) {
          result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
  }
  
  const randomName = "Grupa_" + generateRandomString(10);
  bru.setEnvVar("groupName", randomName);
  
  
  // Pobierz listę restaurantIds ze zmiennej środowiskowej
  var restaurantIds = bru.getEnvVar("restaurantIds");
  
  // Upewnij się, że restaurantIds to tablica
  if (restaurantIds && typeof restaurantIds === 'string') {
      restaurantIds = JSON.parse(restaurantIds);
  }
  
  // Sprawdź, czy lista nie jest pusta
  if (restaurantIds && restaurantIds.length > 0) {
      // Losuj jeden element z listy
      var randomRestaurantId = restaurantIds[Math.floor(Math.random() * restaurantIds.length)];
      
      // Zapisz wylosowany restaurantId do zmiennej środowiskowej
      bru.setEnvVar("randomRestaurantId", randomRestaurantId);
      console.log("Random restaurantId selected:", randomRestaurantId);
  } else {
      console.log("No restaurantIds available.");
  }
  
}

tests {
  // Pobierz odpowiedź z serwera
  var jsonData = res.getBody();
  
  // Test, czy status kod jest 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Test, czy odpowiedź zawiera właściwość 'restaurantGroupId' i czy jest liczbą
  test("Response contains restaurantGroupId", function () {
      expect(jsonData).to.have.property('restaurantGroupId');
      expect(jsonData.restaurantGroupId).to.be.a('number');
  });
  
  // Test, czy odpowiedź zawiera właściwość 'name' i czy jest ciągiem znaków
  test("Response contains name", function () {
      expect(jsonData).to.have.property('name');
      expect(jsonData.name).to.be.a('string');
  });
  
  // Test, czy odpowiedź zawiera właściwość 'restaurants' i czy jest to tablica
  test("Response contains restaurants array", function () {
      expect(jsonData).to.have.property('restaurants');
      expect(jsonData.restaurants).to.be.an('array');
      expect(jsonData.restaurants.length).to.be.above(0); // Sprawdź, czy lista restauracji nie jest pusta
  });
  
  // Sprawdzenie szczegółów restauracji
  test("Each restaurant contains correct properties", function () {
      var restaurant = jsonData.restaurants[0]; // Pobierz pierwszą restaurację
  
      expect(restaurant).to.have.property('restaurantId').that.is.a('number');
      expect(restaurant).to.have.property('name').that.is.a('string');
      expect(restaurant).to.have.property('nip').that.is.a('string');
      expect(restaurant).to.have.property('restaurantType').that.is.a('string');
      expect(restaurant).to.have.property('address').that.is.a('string');
      expect(restaurant).to.have.property('city').that.is.a('string');
      expect(restaurant).to.have.property('location').that.is.an('object');
      expect(restaurant.location).to.have.property('latitude').that.is.a('number');
      expect(restaurant.location).to.have.property('longitude').that.is.a('number');
      expect(restaurant).to.have.property('groupId').that.is.a('number');
      expect(restaurant).to.have.property('logo').that.is.a('string');
      expect(restaurant).to.have.property('description').that.is.a('string');
      expect(restaurant).to.have.property('reservationDeposit').that.is.a('number');
      expect(restaurant).to.have.property('provideDelivery').that.is.a('boolean');
      expect(restaurant).to.have.property('tags').that.is.an('array');
      expect(restaurant).to.have.property('isVerified').that.is.a('boolean');
      expect(restaurant).to.have.property('rating').that.is.a('number');
      expect(restaurant).to.have.property('numberReviews').that.is.a('number');
  });
  
  
  // Pobierz odpowiedź z serwera
  var jsonData = res.getBody();
  
  // Sprawdź, czy odpowiedź zawiera 'restaurantGroupId'
  if (jsonData.restaurantGroupId) {
      // Pobierz obecną listę 'restaurantGroupIds' ze zmiennej środowiskowej (jeśli istnieje)
      var restaurantGroupIds = bru.getEnvVar("restaurantGroupIds");
  
      // Jeśli lista jest pusta lub nie istnieje, utwórz nową tablicę
      if (!restaurantGroupIds) {
          restaurantGroupIds = [];
      } else {
          // Jeśli lista istnieje, parsujemy ją z formatu JSON
          restaurantGroupIds = JSON.parse(restaurantGroupIds);
      }
  
      // Dodaj nowy 'restaurantGroupId' do listy
      restaurantGroupIds.push(jsonData.restaurantGroupId);
  
      // Zapisz zaktualizowaną listę z powrotem do zmiennej środowiskowej
      bru.setEnvVar("restaurantGroupIds", JSON.stringify(restaurantGroupIds));
      console.log("Restaurant Group ID saved:", jsonData.restaurantGroupId);
  } else {
      console.log("No restaurantGroupId found in the response.");
  }
  
  
}
