meta {
  name: -id--employees
  type: http
  seq: 1
}

get {
  url: {{host}}/my-restaurants/:id/employees
  body: none
  auth: bearer
}

params:path {
  id: {{firstRestaurantId}}
}

auth:bearer {
  token: {{JD}}
}

tests {
  // 1. Sprawdzenie statusu odpowiedzi
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Sprawdzenie, czy odpowiedź jest w formacie JSON i zawiera listę pracowników
  test("Response is a JSON array", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.be.an('array');
  });
  
  // 3. Sprawdzenie struktury każdego obiektu pracownika
  test("Each employee object has required fields", function () {
      var jsonData = res.getBody();
  
      jsonData.forEach(employee => {
          expect(employee).to.have.property('employeeId').that.is.a('string');
          expect(employee).to.have.property('login').that.is.a('string');
          expect(employee).to.have.property('firstName').that.is.a('string');
          expect(employee).to.have.property('lastName').that.is.a('string');
          expect(employee).to.have.property('birthDate').that.is.a('string');
  
          // Sprawdzenie nowego formatu numeru telefonu
          expect(employee).to.have.property('phoneNumber').that.is.an('object');
          expect(employee.phoneNumber).to.have.property('code').that.is.a('string').and.to.not.be.empty;
          expect(employee.phoneNumber).to.have.property('number').that.is.a('string').and.to.not.be.empty;
  
          expect(employee).to.have.property('isHallEmployee').that.is.a('boolean');
          expect(employee).to.have.property('isBackdoorEmployee').that.is.a('boolean');
          expect(employee).to.have.property('dateFrom').that.is.a('string');
          expect(employee).to.have.property('dateUntil').that.satisfy(value => value === null || typeof value === 'string');
          expect(employee).to.have.property('employmentId').that.is.a('number');
      });
  });
  
  // 4. Sprawdzenie wartości pól 'isHallEmployee' i 'isBackdoorEmployee' dla każdego pracownika
  test("Fields 'isHallEmployee' and 'isBackdoorEmployee' are boolean", function () {
      var jsonData = res.getBody();
      
      jsonData.forEach(employee => {
          expect(employee.isHallEmployee).to.be.a('boolean');
          expect(employee.isBackdoorEmployee).to.be.a('boolean');
      });
  });
  
}
