meta {
  name: -user-employees
  type: http
  seq: 1
}

get {
  url: {{host}}/user/employees
  body: none
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  test("Response body has correct structure", function () {
      const jsonData = res.getBody();
  
      expect(jsonData).to.be.an('array').that.is.not.empty;
  
      jsonData.forEach((user) => {
          // Test podstawowych właściwości użytkownika
          expect(user).to.have.property('userId').that.is.a('string');
          expect(user).to.have.property('login').that.is.a('string');
          expect(user).to.have.property('firstName').that.is.a('string');
          expect(user).to.have.property('lastName').that.is.a('string');
          expect(user).to.have.property('birthDate').that.is.a('string');
          expect(user).to.have.property('phoneNumber').that.is.an('object');
          
          // Test struktury obiektu phoneNumber
          expect(user.phoneNumber).to.have.property('code').that.is.a('string');
          expect(user.phoneNumber).to.have.property('number').that.is.a('string');
          
          // Test struktury employments
          expect(user).to.have.property('employments').that.is.an('array').that.is.not.empty;
          user.employments.forEach((employment) => {
              expect(employment).to.have.property('employmentId').that.is.a('number');
              expect(employment).to.have.property('isBackdoorEmployee').that.is.a('boolean');
              expect(employment).to.have.property('isHallEmployee').that.is.a('boolean');
              expect(employment).to.have.property('restaurantName').that.is.a('string');
              expect(employment).to.have.property('dateFrom').that.is.a('string');
              expect(employment).to.have.property('dateUntil').that.satisfy(
                  (value) => value === null || typeof value === 'string'
              );
  
              // Test obiektu restaurant
              expect(employment).to.have.property('restaurant').that.is.an('object');
              const restaurant = employment.restaurant;
              expect(restaurant).to.have.property('restaurantId').that.is.a('number');
              expect(restaurant).to.have.property('name').that.is.a('string');
              expect(restaurant).to.have.property('restaurantType').that.is.a('string');
              expect(restaurant).to.have.property('address').that.is.a('string');
              expect(restaurant).to.have.property('city').that.is.a('string');
              expect(restaurant).to.have.property('location').that.is.an('object');
              
              // Test obiektu location
              expect(restaurant.location).to.have.property('latitude').that.is.a('number');
              expect(restaurant.location).to.have.property('longitude').that.is.a('number');
              
              // Test pozostałych właściwości restaurant
              expect(restaurant).to.have.property('logo').that.is.a('string');
              expect(restaurant).to.have.property('description').that.is.a('string');
              expect(restaurant).to.have.property('reservationDeposit').that.satisfy(
                  (value) => value === null || typeof value === 'number'
              );
              expect(restaurant).to.have.property('maxReservationDurationMinutes').that.is.a('number');
              expect(restaurant).to.have.property('provideDelivery').that.is.a('boolean');
              expect(restaurant).to.have.property('tags').that.is.an('array').that.is.not.empty;
              restaurant.tags.forEach(tag => expect(tag).to.be.a('string'));
              expect(restaurant).to.have.property('rating').that.is.a('number');
              expect(restaurant).to.have.property('numberReviews').that.is.a('number');
              expect(restaurant).to.have.property('openingHours').that.is.an('array').that.is.not.empty;
  
              // Test otwarcia godzin
              restaurant.openingHours.forEach((hours) => {
                  expect(hours).to.have.property('from').that.is.a('string');
                  expect(hours).to.have.property('until').that.is.a('string');
              });
          });
  
          // Test zdjęcia użytkownika
          expect(user).to.have.property('photo').that.satisfy(
              (value) => value === null || typeof value === 'string'
          );
      });
  });
  
  test("Each user has mandatory fields with correct types", function () {
      const jsonData = res.getBody();
  
      jsonData.forEach((user) => {
          expect(user).to.have.property('userId').that.is.a('string');
          expect(user).to.have.property('login').that.is.a('string');
          expect(user).to.have.property('firstName').that.is.a('string');
          expect(user).to.have.property('lastName').that.is.a('string');
          expect(user).to.have.property('birthDate').that.is.a('string');
          expect(user).to.have.property('phoneNumber').that.is.an('object');
          expect(user.phoneNumber).to.have.property('code').that.is.a('string');
          expect(user.phoneNumber).to.have.property('number').that.is.a('string');
          expect(user).to.have.property('employments').that.is.an('array').that.is.not.empty;
          expect(user).to.have.property('photo').that.satisfy(
              (value) => value === null || typeof value === 'string'
          );
      });
  });
  
  test("Each employment has mandatory fields with correct types", function () {
      const jsonData = res.getBody();
  
      jsonData.forEach((user) => {
          user.employments.forEach((employment) => {
              expect(employment).to.have.property('employmentId').that.is.a('number');
              expect(employment).to.have.property('isBackdoorEmployee').that.is.a('boolean');
              expect(employment).to.have.property('isHallEmployee').that.is.a('boolean');
              expect(employment).to.have.property('restaurantName').that.is.a('string');
              expect(employment).to.have.property('dateFrom').that.is.a('string');
              expect(employment).to.have.property('dateUntil').that.satisfy(
                  (value) => value === null || typeof value === 'string'
              );
              expect(employment).to.have.property('restaurant').that.is.an('object');
          });
      });
  });
  
  test("Each restaurant has mandatory fields with correct types", function () {
      const jsonData = res.getBody();
  
      jsonData.forEach((user) => {
          user.employments.forEach((employment) => {
              const restaurant = employment.restaurant;
  
              expect(restaurant).to.have.property('restaurantId').that.is.a('number');
              expect(restaurant).to.have.property('name').that.is.a('string');
              expect(restaurant).to.have.property('restaurantType').that.is.a('string');
              expect(restaurant).to.have.property('address').that.is.a('string');
              expect(restaurant).to.have.property('city').that.is.a('string');
              expect(restaurant).to.have.property('location').that.is.an('object');
              expect(restaurant.location).to.have.property('latitude').that.is.a('number');
              expect(restaurant.location).to.have.property('longitude').that.is.a('number');
              expect(restaurant).to.have.property('logo').that.is.a('string');
              expect(restaurant).to.have.property('description').that.is.a('string');
              expect(restaurant).to.have.property('reservationDeposit').that.satisfy(
                  (value) => value === null || typeof value === 'number'
              );
              expect(restaurant).to.have.property('maxReservationDurationMinutes').that.is.a('number');
              expect(restaurant).to.have.property('provideDelivery').that.is.a('boolean');
              expect(restaurant).to.have.property('tags').that.is.an('array').that.is.not.empty;
              restaurant.tags.forEach(tag => expect(tag).to.be.a('string'));
              expect(restaurant).to.have.property('rating').that.is.a('number');
              expect(restaurant).to.have.property('numberReviews').that.is.a('number');
              expect(restaurant).to.have.property('openingHours').that.is.an('array').that.is.not.empty;
  
              restaurant.openingHours.forEach((hours) => {
                  expect(hours).to.have.property('from').that.is.a('string');
                  expect(hours).to.have.property('until').that.is.a('string');
              });
          });
      });
  });
  
  test("Each user has a unique userId", function () {
      const jsonData = res.getBody();
      const userIds = jsonData.map(user => user.userId);
      const uniqueUserIds = new Set(userIds);
  
      expect(uniqueUserIds.size).to.equal(userIds.length);
  });
  
  test("Employments are consistent with restaurant names", function () {
      const jsonData = res.getBody();
  
      jsonData.forEach((user) => {
          user.employments.forEach((employment) => {
              const restaurant = employment.restaurant;
              expect(employment.restaurantName).to.equal(restaurant.name);
          });
      });
  });
  
  
}
