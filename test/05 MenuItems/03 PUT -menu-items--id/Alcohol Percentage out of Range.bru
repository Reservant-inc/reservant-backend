meta {
  name: Alcohol Percentage out of Range
  type: http
  seq: 14
}

put {
  url: {{host}}/menu-items/:id
  body: json
  auth: bearer
}

params:path {
  id: {{newMenuItemId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "price": {{randomInt}},
    "name": "{{menuName}}",
    "alternateName": "{{menuName}}",
    "alcoholPercentage": {{randomOutOfRangeAlcoholPercentage}},
    "photo": "test-jd.png",
      "ingredients": []
  }
}

assert {
  res.body.errors.alcoholPercentage[0]: contains "'Alcohol Percentage' must be between 0 and 100. You entered {{randomOutOfRangeAlcoholPercentage}}."
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 for 'alcoholPercentage' out of allowed range", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'errors' i odpowiedni komunikat błędu dla 'alcoholPercentage'
  test("Error response contains message for 'alcoholPercentage' out of allowed range", function () {
      var jsonData = res.getBody();
      var expectedErrorMessage = "'Alcohol Percentage' must be between 0 and 100. You entered " + "{{randomOutOfRangeAlcoholPercentage}}" + ".";
      
      // Sprawdzenie błędu dla 'alcoholPercentage' poza zakresem
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('alcoholPercentage');
  //     expect(jsonData.errors.alcoholPercentage[0]).to.include(expectedErrorMessage);
  });
  
}
