meta {
  name: Updates restaurant info provideDelivery error
  type: http
  seq: 14
}

put {
  url: {{host}}/my-restaurants/:id
  body: json
  auth: bearer
}

params:path {
  id: {{firstRestaurantId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{randomCompanyName}}",
    "nip": "{{randomNIP}}",
    "restaurantType": "{{randomRestaurantType}}",
    "address": "{{randomStreetAddress}}",
    "postalIndex": "{{randomPostalCode}}",
    "city": "{{randomCity}}",
    "rentalContract": "test-jd.pdf",
    "alcoholLicense": "test-jd.pdf",
    "businessPermission": "test-jd.pdf",
    "idCard": "test-jd.pdf",
    "logo": "test-jd.png",
    "description": "{{randomLoremSentence}}",
    "reservationDeposit": {{randomDeposit}},
    "provideDelivery": {{randomBoolean}},
    "maxReservationDurationMinutes": {{randomDuration}},
    "openingHours": [
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      }
    ],
    "tags": [
      "InvalidTag"  // Niepoprawna wartość dla tagu
    ],
    "photos": [
      "test-jd.png"
    ],
    "location": {
      "latitude": {{randomLatitude}},
      "longitude": {{randomLongitude}}
    }
  }
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400 when 'tags' contains an invalid value", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
  });
  
  // Sprawdzenie, czy odpowiedź zawiera błąd dla niepoprawnego pola 'tags'
  test("Error for invalid 'tags' value is present", function () {
      var responseData = res.getBody();
      
      // Sprawdzamy, czy błąd dotyczy niepoprawnej wartości pola 'tags'
      expect(responseData.errors).to.have.property('tags[0]');
      expect(responseData.errors['tags[0]'][0]).to.include("Must be a valid restaurant tag");
  });
  
  // Sprawdzenie obecności kodu błędu dla niepoprawnego pola 'tags'
  test("Error code for invalid 'tags' value is present", function () {
      var responseData = res.getBody();
      
      // Sprawdzamy, czy kod błędu dotyczy niepoprawnej wartości pola 'tags'
      expect(responseData.errorCodes).to.have.property('tags[0]');
      expect(responseData.errorCodes['tags[0]'][0]).to.include("RestaurantTag");
  });
  
}
