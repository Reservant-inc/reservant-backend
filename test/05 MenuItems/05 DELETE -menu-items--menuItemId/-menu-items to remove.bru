meta {
  name: -menu-items to remove
  type: http
  seq: 1
}

post {
  url: {{host}}/menu-items
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "restaurantId": {{firstRestaurantId}},
    "price": {{randomInt}},
    "name": "{{menuName}}",
    "alternateName": "{{menuName}}",
    "alcoholPercentage": {{randomDouble0to3}},
    "photo": "test-jd.png",
      "ingredients": []
  }
}

script:pre-request {
  function getRandomMenuItemName() {
      var menuNames = ["seafood", "burger", "sushi", "kebab","pasta","pizza"];
      var randomIndex = Math.floor(Math.random() * menuNames.length);
      return menuNames[randomIndex];
  }
  
  var randomMenuName = getRandomMenuItemName();
  bru.setEnvVar("menuName", randomMenuName);
  
  // Funkcja do generowania losowej liczby całkowitej w zakresie od 0 do 500
  function getRandomInt(max) {
      return Math.floor(Math.random() * (max + 1)); // max + 1, aby uwzględnić max w zakresie
  }
  
  // Ustawienie zmiennej środowiskowej na losową liczbę całkowitą od 0 do 500
  bru.setEnvVar("randomInt", getRandomInt(500));
  console.log("Generated random integer:", bru.getEnvVar("randomInt"));
  
  // Funkcja do generowania losowej liczby zmiennoprzecinkowej w zakresie od min do max
  function getRandomDoubleInRange(min, max) {
      return Math.random() * (max - min) + min;
  }
  
  // Ustawienie zmiennej środowiskowej na losową liczbę zmiennoprzecinkową od 0 do 3
  bru.setEnvVar("randomDouble0to3", getRandomDoubleInRange(0, 3).toFixed(2));  // Zaokrąglamy do 2 miejsc po przecinku
  console.log("Generated random double from 0 to 3:", bru.getEnvVar("randomDouble0to3"));
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Sprawdzenie, czy odpowiedź jest w formacie JSON
  test("Response is a valid JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // Parsowanie odpowiedzi JSON
  var jsonData = res.getBody();
  
  // Test sprawdzający, czy odpowiedź zawiera wszystkie oczekiwane pola
  test("Response has all expected fields", function () {
      expect(jsonData).to.have.property('menuItemId');
      expect(jsonData).to.have.property('price');
      expect(jsonData).to.have.property('name');
      expect(jsonData).to.have.property('alternateName');
      expect(jsonData).to.have.property('alcoholPercentage');
      expect(jsonData).to.have.property('photo');
      expect(jsonData).to.have.property('ingredients');
  });
  
  
  // Parsowanie odpowiedzi JSON
  var jsonData = res.getBody();
  
  // Sprawdzenie, czy odpowiedź zawiera pole 'menuItemId'
  test("Response contains 'menuItemId'", function () {
      expect(jsonData).to.have.property('menuItemId');
  });
  
  // Zapisywanie 'menuItemId' do zmiennej środowiskowej
  bru.setEnvVar("menuItemToRemove", jsonData.menuItemId);
  console.log("Saved menuItemId to environment variable 'menuItemToRemove':", jsonData.menuItemId);
}
