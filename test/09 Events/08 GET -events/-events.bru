meta {
  name: -events
  type: http
  seq: 1
}

get {
  url: {{host}}/events
  body: none
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response body structure is valid", function () {
      const body = res.getBody();
  
      // Sprawdź główne właściwości
      expect(body).to.have.property("page").that.is.a("number");
      expect(body).to.have.property("totalPages").that.is.a("number");
      expect(body).to.have.property("perPage").that.is.a("number");
      expect(body).to.have.property("orderByOptions").that.is.an("array");
      expect(body).to.have.property("items").that.is.an("array");
  
      if (body.items.length > 0) {
          // Iteruj przez elementy w tablicy 'items'
          body.items.forEach((event, index) => {
              test(`Event #${index + 1} has valid structure`, function () {
                  expect(event).to.have.property("eventId").that.is.a("number");
                  expect(event).to.have.property("name").that.is.a("string");
                  expect(event).to.have.property("description").that.is.a("string");
                  expect(event).to.have.property("time").that.is.a("string");
                  expect(event).to.have.property("maxPeople").that.is.a("number");
                  expect(event).to.have.property("mustJoinUntil").that.is.a("string");
                  expect(event).to.have.property("creator").that.is.an("object");
  
                  const creator = event.creator;
                  expect(creator).to.have.property("userId").that.is.a("string");
                  expect(creator).to.have.property("firstName").that.is.a("string");
                  expect(creator).to.have.property("lastName").that.is.a("string");
                  expect(creator).to.have.property("photo").that.satisfy(
                      (val) => val === null || typeof val === "string"
                  );
  
                  // Sprawdź restaurację, jeśli istnieje
                  if (event.restaurant) {
                      const restaurant = event.restaurant;
                      expect(restaurant).to.have.property("restaurantId").that.is.a("number");
                      expect(restaurant).to.have.property("name").that.is.a("string");
                      expect(restaurant).to.have.property("restaurantType").that.is.a("string");
                      expect(restaurant).to.have.property("address").that.is.a("string");
                      expect(restaurant).to.have.property("city").that.is.a("string");
                      expect(restaurant).to.have.property("location").that.is.an("object");
  
                      const location = restaurant.location;
                      expect(location).to.have.property("latitude").that.is.a("number");
                      expect(location).to.have.property("longitude").that.is.a("number");
  
                      expect(restaurant).to.have.property("logo").that.is.a("string");
                      expect(restaurant).to.have.property("description").that.is.a("string");
                      expect(restaurant).to.have.property("reservationDeposit").that.satisfy(
                          (val) => val === null || typeof val === "number"
                      );
                      expect(restaurant).to.have.property("maxReservationDurationMinutes").that.is.a("number");
                      expect(restaurant).to.have.property("provideDelivery").that.is.a("boolean");
                      expect(restaurant).to.have.property("tags").that.is.an("array");
  
                      restaurant.tags.forEach((tag) => {
                          expect(tag).to.be.a("string");
                      });
  
                      expect(restaurant).to.have.property("rating").that.is.a("number");
                      expect(restaurant).to.have.property("numberReviews").that.is.a("number");
  
                      expect(restaurant).to.have.property("openingHours").that.is.an("array");
                      restaurant.openingHours.forEach((hours) => {
                          expect(hours).to.have.property("from").that.is.a("string");
                          expect(hours).to.have.property("until").that.is.a("string");
                      });
                  } else {
                      expect(event).to.have.property("restaurant").that.is.null;
                  }
  
                  // Sprawdź pozostałe pola wydarzenia
                  expect(event).to.have.property("distance").that.satisfy(
                      (val) => val === null || typeof val === "number"
                  );
                  expect(event).to.have.property("numberInterested").that.is.a("number");
                  expect(event).to.have.property("numberParticipants").that.is.a("number");
                  expect(event).to.have.property("photo").that.is.a("string");
              });
          });
      }
  });
  
}
