meta {
  name: Price out of Range
  type: http
  seq: 8
}

put {
  url: {{host}}/menu-items/:id
  body: json
  auth: bearer
}

params:path {
  id: {{newMenuItemId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "price": {{randomOutOfRangePrice}}, 
    "name": "{{menuName}}",
    "alternateName": "{{menuName}}",
    "alcoholPercentage": {{randomDouble0to3}},
    "photo": "test-jd.png",
      "ingredients": []
  }
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 for price out of allowed range", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'errors' i odpowiedni komunikat błędu dla 'price'
  test("Error response contains message for price out of allowed range", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie błędu dla 'price' poza zakresem
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('price');
      expect(jsonData.errors.price[0]).to.include("'Price' must be between 0 and 500.");
  });
  
}
