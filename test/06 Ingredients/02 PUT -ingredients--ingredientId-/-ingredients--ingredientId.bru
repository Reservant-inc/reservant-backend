meta {
  name: -ingredients--ingredientId
  type: http
  seq: 1
}

put {
  url: {{host}}/ingredients/:ingredientId
  body: json
  auth: bearer
}

params:path {
  ingredientId: {{newIngredient.ingredientId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "publicName": "{{randomIngredientName}}",
    "unitOfMeasurement": "{{unitOfMeasurement}}",
    "minimalAmount": {{minimalAmount}},
    "amountToOrder": {{amountToOrder}}
  }
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Parsowanie odpowiedzi JSON
  var jsonData = res.getBody();
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'ingredientId'
  test("Response contains 'ingredientId'", function () {
      expect(jsonData).to.have.property('ingredientId');
  });
  
  
  // Testy weryfikujące poprawność danych odpowiedzi z danymi wysłanymi w żądaniu
  test("Response data matches request data", function () {
      expect(jsonData.publicName).to.eql(bru.getEnvVar("randomIngredientName"));
      expect(jsonData.unitOfMeasurement).to.eql(bru.getEnvVar("unitOfMeasurement"));
      expect(jsonData.minimalAmount).to.eql(bru.getEnvVar("minimalAmount"));
      expect(jsonData.amountToOrder).to.eql(bru.getEnvVar("amountToOrder"));
  });
  
}
