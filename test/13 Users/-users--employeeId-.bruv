meta {
  name: -users--employeeId-
  type: http
  seq: 4
}

get {
  url: {{host}}/users/:employeeId
  body: none
  auth: bearer
}

params:path {
  employeeId: 3d7c0409-f05e-4a1c-b527-9ab6f213e0cc
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
  //     pm.response.to.be.json;
  });
  
  test("Response body has correct structure and data types", function () {
      const jsonData = res.getBody();
  
      expect(jsonData).to.have.property('userId').that.is.a('string');
      expect(jsonData).to.have.property('login').that.is.a('string');
      expect(jsonData).to.have.property('email').that.is.oneOf([null, 'string']);
      expect(jsonData).to.have.property('phoneNumber').that.is.a('string');
      expect(jsonData).to.have.property('firstName').that.is.a('string');
      expect(jsonData).to.have.property('lastName').that.is.a('string');
      expect(jsonData).to.have.property('registeredAt').that.is.a('string');
      expect(jsonData).to.have.property('birthDate').that.is.a('string');
      expect(jsonData).to.have.property('roles').that.is.an('array');
  
      jsonData.roles.forEach(role => {
          expect(role).to.be.a('string');
      });
  
      expect(jsonData).to.have.property('employerId').that.is.a('string');
      expect(jsonData).to.have.property('photo');
      if (jsonData.photo !== null) {
          expect(jsonData.photo).to.be.a('string');}
  });
  
}
