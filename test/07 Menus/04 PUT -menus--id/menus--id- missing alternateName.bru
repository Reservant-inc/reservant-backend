meta {
  name: menus--id- missing alternateName
  type: http
  seq: 12
}

put {
  url: {{host}}/menus/:menuId
  body: json
  auth: bearer
}

params:path {
  menuId: {{randomMenuId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{$randomStreetName}}",
    "menuType": "{{randomMenuType}}",
    "dateFrom": "{{formattedDate}}",
    "dateUntil": "{{randomFutureDate}}",
     "photo": "test-jd.png"
  }
}

script:pre-request {
  // Pobieranie listy menuIds z środowiska
  var menuIds = JSON.parse(bru.getEnvVar("menuIds"));
  
  // Sprawdzenie, czy lista menuIds jest prawidłowa i zawiera elementy
  if (menuIds && Array.isArray(menuIds) && menuIds.length > 0) {
      // Losowanie jednego menuId z listy
      var randomIndex = Math.floor(Math.random() * menuIds.length);
      var randomMenuId = menuIds[randomIndex];
  
      // Zapisywanie wylosowanego menuId do środowiska
      bru.setEnvVar("randomMenuId", randomMenuId);
  
      console.log("Wylosowane menuId:", randomMenuId);
  } else {
      console.error("Lista menuIds jest pusta lub nie została znaleziona.");
  }
  
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 200
  test("Status code is 200 for valid menu details", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Sprawdzenie, czy odpowiedź jest w formacie JSON
  test("Response is a valid JSON", function () {
  //     pm.response.to.be.json;
  });
  
  // 3. Sprawdzenie struktury odpowiedzi
  test("Response contains all required fields for menu details", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie podstawowych właściwości menu
      expect(jsonData).to.have.property('menuId').that.is.a('number');
      expect(jsonData).to.have.property('name').that.is.a('string');
      expect(jsonData).to.have.property('alternateName');
      expect(jsonData).to.have.property('menuType').that.is.a('string');
      expect(jsonData).to.have.property('dateFrom').that.is.a('string');
      expect(jsonData).to.have.property('dateUntil').that.is.a('string');
      expect(jsonData).to.have.property('photo').that.is.a('string');
      
      // Sprawdzenie właściwości menuItems (czy jest tablicą i zawiera elementy)
      expect(jsonData).to.have.property('menuItems').that.is.an('array');
      
      jsonData.menuItems.forEach(function(item) {
          expect(item).to.have.property('menuItemId').that.is.a('number');
          expect(item).to.have.property('price').that.is.a('number');
          expect(item).to.have.property('name').that.is.a('string');
          expect(item).to.have.property('alternateName');
          expect(item).to.have.property('alcoholPercentage');
          expect(item).to.have.property('photo').that.is.a('string');
      });
  });
  
  // 4. Sprawdzenie, czy `dateFrom` i `dateUntil` są poprawnymi datami
  test("'dateFrom' and 'dateUntil' are valid dates", function () {
      var jsonData = res.getBody();
      
      // Konwersja do obiektów daty i sprawdzenie, czy są poprawnymi datami
      var dateFrom = new Date(jsonData.dateFrom);
      var dateUntil = new Date(jsonData.dateUntil);
      
      expect(!isNaN(dateFrom.getTime())).to.be.true;
      expect(!isNaN(dateUntil.getTime())).to.be.true;
  });
  
  // 5. Dodatkowe sprawdzenie dla `alternateName` i `photo`
  test("'alternateName' is either a string or null", function () {
      var jsonData = res.getBody();
      
      expect(jsonData.alternateName === null || typeof jsonData.alternateName === 'string').to.be.true;
  });
  
  test("'photo' is a valid string path", function () {
      var jsonData = res.getBody();
      
      expect(jsonData.photo).to.be.a('string').and.to.not.be.empty;
  });
  
}
