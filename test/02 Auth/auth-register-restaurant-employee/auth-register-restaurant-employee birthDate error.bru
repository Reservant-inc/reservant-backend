meta {
  name: auth-register-restaurant-employee birthDate error
  type: http
  seq: 6
}

post {
  url: {{host}}/auth/register-restaurant-employee
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "login": "{{randomLogin}}",
    "firstName": "{{randomFirstName}}",
    "lastName": "{{randomLastName}}",
    "phoneNumber": {
      "code": "{{randomCountryCode}}",
      "number": "{{randomPhoneNumber}}"
    },
    "birthDate": "32-13-2024",  // Niepoprawny format daty
    "password": "{{randomPassword}}"
  }
  
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy 'birthDate' ma niepoprawny format i zwraca odpowiedni błąd
  test("birthDate format is invalid", function () {
      var responseData = res.getBody();
  
      expect(responseData.errors).to.have.property('$.birthDate');
      expect(responseData.errors["$.birthDate"][0]).to.include("The JSON value could not be converted to System.DateOnly");
  });
  
  // Opcjonalnie, sprawdzenie czy jest błąd w 'request'
  test("request field error is present", function () {
      var responseData = res.getBody();
      
      expect(responseData.errors).to.have.property('request');
      expect(responseData.errors.request[0]).to.include("The request field is required.");
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
