meta {
  name: -id--move-to-group group error
  type: http
  seq: 8
}

post {
  url: {{host}}/my-restaurants/:id/move-to-group
  body: json
  auth: bearer
}

params:path {
  id: {{firstRestaurantId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "groupId": "xd"
  }
}

script:pre-request {
  // Pobranie listy restaurantGroupIds ze zmiennych środowiskowych
  var restaurantGroupIds = bru.getEnvVar("restaurantGroupIds");
  
  // Parsowanie listy z JSON
  if (restaurantGroupIds) {
      var groupIdsArray = JSON.parse(restaurantGroupIds);
      
      // Wylosowanie losowego indexu z tablicy
      var randomIndex = Math.floor(Math.random() * groupIdsArray.length);
      
      // Pobranie losowego restaurantGroupId
      var randomRestaurantGroupId = groupIdsArray[randomIndex];
      
      // Zapisanie losowego restaurantGroupId do zmiennej środowiskowej
      bru.setEnvVar("randomRestaurantGroupId", randomRestaurantGroupId);
      
      console.log("Random restaurantGroupId selected: " + randomRestaurantGroupId);
  } else {
      console.log("No restaurantGroupIds found in environment variables.");
  }
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla niepoprawnego groupId
  test("Status code is 400 when 'groupId' is not an integer", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for invalid 'groupId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla niepoprawnego 'groupId'
  test("Response contains error message for invalid 'groupId'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla '$.groupId'
      expect(jsonData.errors).to.have.property('$.groupId');
      expect(jsonData.errors["$.groupId"][0]).to.include("The JSON value could not be converted to System.Int32.");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera błąd dla pola 'request'
  test("Response contains error for 'request' field", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera błąd dla 'request'
      expect(jsonData.errors).to.have.property('request');
      expect(jsonData.errors.request[0]).to.include("The request field is required.");
  });
  
}
