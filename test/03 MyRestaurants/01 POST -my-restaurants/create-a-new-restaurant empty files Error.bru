meta {
  name: create-a-new-restaurant empty files Error
  type: http
  seq: 10
}

post {
  url: {{host}}/my-restaurants
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "{{randomCompanyName}}",
    "nip": "{{randomNIP}}",
    "restaurantType": "{{randomRestaurantType}}",
    "address": "{{randomStreetAddress}}",
    "postalIndex": "{{randomPostalCode}}",
    "city": "{{randomCity}}",
    "rentalContract": "",  // Puste pole dla umowy najmu
    "alcoholLicense": "",  // Puste pole dla licencji alkoholowej
    "businessPermission": "",  // Puste pole dla pozwolenia biznesowego
    "idCard": "",  // Puste pole dla dowodu osobistego
    "logo": "",  // Puste pole dla logo
    "description": "{{randomLoremSentence}}",
    "reservationDeposit": {{randomDeposit}},
    "provideDelivery": {{randomBoolean}},
    "maxReservationDurationMinutes": {{randomDuration}},
    "openingHours": [
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      },
      {
        "from": "{{randomHourStartString}}",
        "until": "{{randomHourEndString}}"
      }
    ],
    "tags": [
      "{{randomRestaurantTag}}"
    ],
    "photos": [
      ""  // Puste pole dla zdjęcia
    ],
    "location": {
      "latitude": {{randomLatitude}},
      "longitude": {{randomLongitude}}
    }
  }
  
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Testy dla kodów błędów
  test("Error codes for empty file fields are present", function () {
      var responseData = res.getBody();
  
      expect(responseData.errorCodes).to.have.property('rentalContract');
      expect(responseData.errorCodes.rentalContract[0]).to.include("FileName.Document");
  
      expect(responseData.errorCodes).to.have.property('alcoholLicense');
      expect(responseData.errorCodes.alcoholLicense[0]).to.include("FileName.Document");
  
      expect(responseData.errorCodes).to.have.property('businessPermission');
      expect(responseData.errorCodes.businessPermission[0]).to.include("FileName.Document");
  
      expect(responseData.errorCodes).to.have.property('idCard');
      expect(responseData.errorCodes.idCard[0]).to.include("FileName.Document");
  
      expect(responseData.errorCodes).to.have.property('logo');
      expect(responseData.errorCodes.logo[0]).to.include("FileName.Image");
  
      expect(responseData.errorCodes).to.have.property('photos[0]');
      expect(responseData.errorCodes["photos[0]"][0]).to.include("FileName.Image");
  });
  
}
