meta {
  name: auth-register-customer
  type: http
  seq: 1
}

post {
  url: {{host}}/auth/register-customer
  body: json
  auth: none
}

body:json {
  {
    "firstName": "{{randomName}}",
    "lastName": "{{randomName}}",
    "login": "{{randomLogin}}",
    "email": "{{randomEmail}}",
    "phoneNumber": "{{randomPhoneNumber}}",
    "birthDate": "{{formattedDate}}",
    "password": "{{randompassword}}"
  }
}

script:pre-request {
  //phone number
  function generateRandomNumberSequence(length) {
      let result = '';
      for (let i = 0; i < length; i++) {
          result += Math.floor(Math.random() * 10); 
      }
      return "+" + result;
  }
  const randomNumbers = generateRandomNumberSequence(11);
  bru.setEnvVar("randomPhoneNumber", randomNumbers);
  
  //date
  function generateFormattedDate() {
      const today = new Date();
      const year = today.getFullYear() - 20;
      const month = ('0' + (today.getMonth() + 1)).slice(-2);
      const day = ('0' + today.getDate()).slice(-2); 
      return `${year}-${month}-${day}`;
  }
  const formattedDate = generateFormattedDate();
  bru.setEnvVar("formattedDate", formattedDate);
  
  function generateRandomEmail() {
      const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
      const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'example.com'];
  
      // Funkcja do generowania losowego ciągu znaków o określonej długości
      function getRandomString(length) {
          let result = '';
          for (let i = 0; i < length; i++) {
              result += chars.charAt(Math.floor(Math.random() * chars.length));
          }
          return result;
      }
  
      // Generowanie losowej nazwy użytkownika (5-10 znaków)
      const username = getRandomString(Math.floor(Math.random() * 6) + 5);
  
      // Wybór losowej domeny z tablicy
      const domain = domains[Math.floor(Math.random() * domains.length)];
  
      // Tworzenie losowego adresu e-mail
      const email = `${username}@${domain}`;
      return email;
  }
  const randomEmail = generateRandomEmail();
  bru.setEnvVar("randomEmail", randomEmail);
  
  function generatePassword() {
      const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';
      const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      const digits = '0123456789';
      const specialChars = '!@#$%^&*()_+{}[]|:;<>,.?/~`';
  
      let password = '';
  
      // Dodajemy co najmniej jedną wielką literę
      password += uppercaseChars.charAt(Math.floor(Math.random() * uppercaseChars.length));
  
      // Dodajemy co najmniej jedną cyfrę
      password += digits.charAt(Math.floor(Math.random() * digits.length));
  
      // Dodajemy co najmniej jeden znak specjalny
      password += specialChars.charAt(Math.floor(Math.random() * specialChars.length));
  
      // Dodajemy co najmniej jedną małą literę
      password += lowercaseChars.charAt(Math.floor(Math.random() * lowercaseChars.length));
  
      // Dodajemy pozostałe losowe znaki (litery małe, duże, cyfry lub znaki specjalne)
      const allChars = lowercaseChars + uppercaseChars + digits + specialChars;
      for (let i = password.length; i < 6; i++) {
          password += allChars.charAt(Math.floor(Math.random() * allChars.length));
      }
  
      // Mieszamy znaki w haśle, aby mała litera, wielka litera, cyfra i znak specjalny były na losowych pozycjach
      password = password.split('').sort(() => 0.5 - Math.random()).join('');
  
      return password;
  }
  
  const randompassword = generatePassword();
  bru.setEnvVar("randompassword", randompassword);
  
  
  function generateRandomName() {
      const names = ['John', 'Emma', 'Oliver', 'Sophia', 'Liam', 'Isabella', 'Noah', 'Mia', 'James', 'Ava'];
  
      // Losowe imię
      const randomName = names[Math.floor(Math.random() * names.length)];
      
      return randomName;
  }
  
  const randomName = generateRandomName();
  bru.setEnvVar("randomName", randomName);
  
  function generateRandomLogin() {
      const names = ['john', 'emma', 'oliver', 'sophia', 'liam', 'isabella', 'noah', 'mia', 'james', 'ava'];
      const digits = '0123456789';
  
      // Losowe imię
      const randomName = names[Math.floor(Math.random() * names.length)];
  
      // Generowanie losowego ciągu cyfr (np. 3 cyfry)
      let randomDigits = '';
      for (let i = 0; i < 3; i++) {
          randomDigits += digits.charAt(Math.floor(Math.random() * digits.length));
      }
  
      // Tworzenie loginu poprzez połączenie imienia i cyfr
      const login = randomName + randomDigits;
  
      return login;
  }
  
  const randomLogin = generateRandomLogin();
  bru.setEnvVar("randomLogin", randomLogin);
  
}

tests {
  // Test to check if the status code is 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Test to check if the response has a JSON body
  test("Response has a JSON body", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // Parsing the request and response body
  var requestData = req.getBody();
  var responseData = res.getBody();
  
  // Check that each expected field is present and non-empty
  test("firstName is present and not empty", function () {
      expect(requestData).to.have.property('firstName');
      expect(requestData.firstName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("lastName is present and not empty", function () {
      expect(requestData).to.have.property('lastName');
      expect(requestData.lastName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("login is present and not empty", function () {
      expect(requestData).to.have.property('login');
      expect(requestData.login).to.be.a('string').and.to.not.be.empty;
  });
  
  test("Email is present and not empty", function () {
      expect(requestData).to.have.property('email');
      expect(requestData.email).to.be.a('string').and.to.not.be.empty;
  });
  
  test("phoneNumber is present and valid", function () {
      expect(requestData).to.have.property('phoneNumber');
      expect(requestData.phoneNumber).to.be.a('string').and.to.not.be.empty;
      expect(Number(requestData.phoneNumber)).to.be.a('number');
  });
  
  test("birthDate is present and valid", function () {
      expect(requestData).to.have.property('birthDate');
      expect(requestData.birthDate).to.be.a('string').and.to.not.be.empty;
      // Dodatkowa walidacja formatu daty mogłaby być dodana tutaj
  });
  
  test("Password is present and not empty", function () {
      expect(requestData).to.have.property('password');
      expect(requestData.password).to.be.a('string').and.to.not.be.empty;
  });
  
  // Validate that the response data structure matches the request data structure
  test("Response structure is valid", function () {
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'userId'
      expect(responseData).to.have.property('userId');
      expect(responseData.userId).to.be.a('string');
  
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'login'
      expect(responseData).to.have.property('login');
      expect(responseData.login).to.be.a('string');
  
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'roles'
      expect(responseData).to.have.property('roles');
      expect(responseData.roles).to.be.an('array');
  
      // Sprawdzenie, czy tablica 'roles' zawiera odpowiednią rolę 'Customer'
      expect(responseData.roles).to.have.members(["Customer"]);
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
