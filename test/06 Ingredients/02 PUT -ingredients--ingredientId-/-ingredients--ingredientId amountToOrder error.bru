meta {
  name: -ingredients--ingredientId amountToOrder error
  type: http
  seq: 10
}

put {
  url: {{host}}/ingredients/:ingredientId
  body: json
  auth: bearer
}

params:path {
  ingredientId: {{newIngredient.ingredientId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "publicName": "{{randomIngredientName}}",
    "unitOfMeasurement": "{{unitOfMeasurement}}",
    "minimalAmount": {{minimalAmount}},
    "amountToOrder": -5  // Błędna wartość (ujemna)
  }
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 when 'amountToOrder' is less than zero", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiednie komunikaty błędów
  test("Error response contains messages for 'amountToOrder' less than zero", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie obecności pola 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy 'errors' zawiera odpowiednie komunikaty dla 'amountToOrder'
      expect(jsonData.errors['amountToOrder'][0]).to.include("The value must be greater than or equal to zero.");
      expect(jsonData.errorCodes['amountToOrder'][0]).to.include("ValueLessThanZero");
  });
  
}
