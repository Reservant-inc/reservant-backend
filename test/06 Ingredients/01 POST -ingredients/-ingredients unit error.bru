meta {
  name: -ingredients unit error
  type: http
  seq: 8
}

post {
  url: {{host}}/ingredients
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "publicName": "{{randomIngredientName}}",
    "unitOfMeasurement": "InvalidUnit",  // Błędna jednostka miary
    "minimalAmount": {{minimalAmount}},
    "amountToOrder": {{amountToOrder}},
    "amount": {{amountToOrder}},
    "restaurantId": {{firstRestaurantId}}
  }
  
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 when 'unitOfMeasurement' is invalid", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiednie komunikaty błędów
  test("Error response contains messages for invalid 'unitOfMeasurement'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie obecności pola 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy 'errors' zawiera odpowiednie komunikaty dla 'unitOfMeasurement'
      expect(jsonData.errors['request'][0]).to.include("The request field is required.");
      expect(jsonData.errors['$.unitOfMeasurement'][0]).to.include("The JSON value could not be converted to Reservant.Api.Models.Enums.UnitOfMeasurement");
  });
  
}
