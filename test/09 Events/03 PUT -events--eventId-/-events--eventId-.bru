meta {
  name: -events--eventId-
  type: http
  seq: 1
}

put {
  url: {{host}}/events/:eventId
  body: json
  auth: bearer
}

params:path {
  eventId: {{randomEventId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "description": "{{groupName}}",
    "time": "{{time}}",
    "mustJoinUntil": "{{mustJoinUntil}}",
    "restaurantId": {{randomRestaurantId}}
  }
}

script:pre-request {
  //lorem
  function getRandomText(maxLength) {
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';
      let result = '';
      const randomLength = Math.floor(Math.random() * (maxLength + 1));
      for (let i = 0; i < randomLength; i++) {
          result += characters.charAt(Math.floor(Math.random() * characters.length));
      }
      return result;
  }
  const maxLength = 200;
  const randomText = getRandomText(maxLength);
  bru.setEnvVar("randomText", randomText);
  console.log("Random Text: ", randomText);
  
  
  // Pobierz listę restaurantIds ze zmiennej środowiskowej
  var restaurantIds = bru.getEnvVar("restaurantIds");
  
  // Upewnij się, że restaurantIds to tablica
  if (restaurantIds && typeof restaurantIds === 'string') {
      restaurantIds = JSON.parse(restaurantIds);
  }
  
  // Sprawdź, czy lista nie jest pusta
  if (restaurantIds && restaurantIds.length > 0) {
      // Losuj jeden element z listy
      var randomRestaurantId = restaurantIds[Math.floor(Math.random() * restaurantIds.length)];
      
      // Zapisz wylosowany restaurantId do zmiennej środowiskowej
      bru.setEnvVar("randomRestaurantId", randomRestaurantId);
      console.log("Random restaurantId selected:", randomRestaurantId);
  } else {
      console.log("No restaurantIds available.");
  }
  
  
  
  
  // Funkcja do generowania losowej daty w przyszłości
  function generateFutureDate() {
      const now = new Date();
      // Dodaj losowy przedział czasu (1-10 dni) w milisekundach
      const futureTime = now.getTime() + Math.floor(Math.random() * 10 + 1) * 24 * 60 * 60 * 1000;
      return new Date(futureTime).toISOString();
  }
  
  // Funkcja do generowania daty przed danym czasem (np. przed `time`)
  function generatePastDateBefore(futureDate) {
      const future = new Date(futureDate);
      // Odejmij losowy czas (1-5 godzin) od futureDate
      const pastTime = future.getTime() - Math.floor(Math.random() * 5 + 1) * 60 * 60 * 1000;
      return new Date(pastTime).toISOString();
  }
  
  // Generowanie przyszłej daty dla 'time'
  const time = generateFutureDate();
  
  // Generowanie daty przed 'time' dla 'mustJoinUntil'
  const mustJoinUntil = generatePastDateBefore(time);
  
  // Zapisz wartości w zmiennych środowiskowych
  bru.setEnvVar("time", time);
  bru.setEnvVar("mustJoinUntil", mustJoinUntil);
  
  console.log("Generated time:", time);
  console.log("Generated mustJoinUntil:", mustJoinUntil);
  
  // Pobierz listę eventIds z środowiska
  var eventIdsList = bru.getEnvVar("eventIdsList");
  
  // Sprawdź, czy lista eventIdsList nie jest pusta
  if (eventIdsList && eventIdsList.length > 0) {
      // Parsuj listę (jeśli została zapisana jako string JSON)
      eventIdsList = JSON.parse(eventIdsList);
      
      // Losuj indeks z listy
      var randomIndex = Math.floor(Math.random() * eventIdsList.length);
      
      // Pobierz losowe eventId
      var randomEventId = eventIdsList[randomIndex];
      
      // Zapisz losowe eventId do środowiska
      bru.setEnvVar("randomEventId", randomEventId);
      
      console.log("Losowy eventId: " + randomEventId);
  } else {
      console.log("Lista eventIdsList jest pusta lub nie istnieje");
  }
  
  
  
}

tests {
  // Pobierz odpowiedź z serwera
  var jsonData = res.getBody();
  
  // Test, czy odpowiedź zawiera wszystkie właściwe pola z odpowiednimi typami
  test("Response contains all required fields with correct types", function () {
      // Status code
      expect(res.getStatus()).to.equal(200);
      
      // Sprawdzanie właściwości i ich typów
      expect(jsonData).to.have.property('eventId').that.is.a('number');
      expect(jsonData).to.have.property('createdAt').that.is.a('string');
      expect(jsonData).to.have.property('description').that.is.a('string');
      expect(jsonData).to.have.property('time').that.is.a('string');
      expect(jsonData).to.have.property('mustJoinUntil').that.is.a('string');
      expect(jsonData).to.have.property('creatorId').that.is.a('string');
      expect(jsonData).to.have.property('creatorFullName').that.is.a('string');
      expect(jsonData).to.have.property('restaurantId').that.is.a('number');
      expect(jsonData).to.have.property('restaurantName').that.is.a('string');
      
      // Sprawdzenie 'visitId' może być null lub liczbą
      expect(jsonData.visitId === null || typeof jsonData.visitId === 'number').to.be.true;
      
      // 'interested' musi być tablicą
      expect(jsonData).to.have.property('interested').that.is.an('array');
  });
  
}
