meta {
  name: menus--id- invalid menuId
  type: http
  seq: 7
}

delete {
  url: {{host}}/menus/:id
  body: none
  auth: bearer
}

params:path {
  id: 0
}

auth:bearer {
  token: {{JD}}
}

script:pre-request {
  function generateRandomNumber010() {
      return Math.floor(Math.random() * 11);
  }
  var randomNumber010 = generateRandomNumber010();
  bru.setEnvVar("randomNumber010", randomNumber010);
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400 for menu not found", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // 2. Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for menu not found", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('');
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errorCodes'
      expect(jsonData).to.have.property('errorCodes');
      expect(jsonData.errorCodes).to.have.property('');
  });
  
  // 3. Sprawdzenie, czy odpowiedź zawiera odpowiedni błąd dla menu, które nie zostało znalezione
  test("Response contains error message for menu not found", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla menu, które nie zostało znalezione
      expect(jsonData.errors[''][0]).to.include("Menu not found");
  });
  
  // 4. Sprawdzenie, czy odpowiedź zawiera odpowiedni kod błędu 'NotFound' dla menu, które nie zostało znalezione
  test("Response contains error code 'NotFound' for menu not found", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu dla menu, które nie zostało znalezione
      expect(jsonData.errorCodes[''][0]).to.include("NotFound");
  });
  
}
