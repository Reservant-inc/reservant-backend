meta {
  name: auth-register-restaurant-employee login error
  type: http
  seq: 2
}

post {
  url: {{host}}/auth/register-restaurant-employee
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "login": "invalid@login!",  // Login zawiera niepoprawne znaki specjalne
    "firstName": "{{randomFirstName}}",
    "lastName": "{{randomLastName}}",
       "phoneNumber": {
      "code": "{{randomCountryCode}}",
      "number": "{{randomPhoneNumber}}"
    },
    "birthDate": "{{randomBirthDate}}",
    "password": "{{randomPassword}}"
  }
  
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy login zawiera niepoprawne znaki specjalne i zwraca odpowiedni błąd
  test("login contains invalid characters", function () {
      var responseData = res.getBody();
  
      expect(responseData.errors).to.have.property('');
      expect(responseData.errors[""][0]).to.include("Username 'JD+invalid@login!' is invalid, can only contain letters or digits.");
  
      expect(responseData.errorCodes).to.have.property('');
      expect(responseData.errorCodes[""][0]).to.include("IdentityError");
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
