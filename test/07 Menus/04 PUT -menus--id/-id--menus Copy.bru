meta {
  name: -id--menus Copy
  type: http
  seq: 14
}

get {
  url: {{host}}/my-restaurants/:id/menus
  body: none
  auth: bearer
}

params:path {
  id: {{randomRestaurantId}}
}

auth:bearer {
  token: {{JD}}
}

script:pre-request {
  // Pobieranie listy restaurantIds z środowiska
  var restaurantIds = JSON.parse(bru.getEnvVar("restaurantIds"));
  
  // Sprawdzenie, czy lista restaurantIds jest prawidłowa i zawiera elementy
  if (restaurantIds && Array.isArray(restaurantIds) && restaurantIds.length > 0) {
      // Losowanie jednego restaurantId z listy
      var randomIndex = Math.floor(Math.random() * restaurantIds.length);
      var randomRestaurantId = restaurantIds[randomIndex];
  
      // Zapisywanie wylosowanego restaurantId do środowiska
      bru.setEnvVar("randomRestaurantId", randomRestaurantId);
  
      console.log("Wylosowane restaurant ID:", randomRestaurantId);
  } else {
      console.error("Lista restaurantIds jest pusta lub nie została znaleziona.");
  }
}

tests {
  // 1. Sprawdzenie statusu odpowiedzi
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Sprawdzenie, czy odpowiedź nie jest pusta
  test("Response is not empty", function () {
      var responseBody = res.getBody();
      expect(responseBody).to.exist;
      expect(responseBody).to.not.be.empty;
  });
  
  // 3. Sprawdzenie, czy odpowiedź ma poprawny Content-Type
  test("Response Content-Type is application/json", function () {
      var contentType = res.getHeader('Content-Type');
      expect(contentType).to.include('application/json');
  });
  
  // 4. Sprawdzenie, czy odpowiedź zawiera tablicę
  test("Response is an array", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.be.an('array');
  });
  
  // 5. Sprawdzenie struktury każdego menu w odpowiedzi
  test("Menu structure", function () {
      var jsonData = res.getBody();
      
      jsonData.forEach(item => {
          expect(item).to.have.property('menuId').that.is.a('number');
          expect(item).to.have.property('name').that.is.a('string');
          expect(item).to.have.property('alternateName').that.satisfies(value => value === null || typeof value === 'string');
          expect(item).to.have.property('menuType').that.is.a('string');
          expect(item).to.have.property('dateFrom').that.is.a('string');
          expect(item).to.have.property('dateUntil').that.satisfies(value => value === null || typeof value === 'string');
      });
  });
  
  // 6. Tworzenie listy menuId i zapis do zmiennej środowiskowej
  var jsonData = res.getBody();
  if (Array.isArray(jsonData)) {
      var menuIds = jsonData.map(menu => menu.menuId);
  
      // Zapisywanie listy menuId do zmiennych Bruno
      bru.setEnvVar("menuIds", JSON.stringify(menuIds));
  
      // 7. Test sprawdzający, czy lista menuId została poprawnie zapisana
      test("Menu IDs have been saved to environment", function () {
          expect(bru.getEnvVar("menuIds")).to.eql(JSON.stringify(menuIds));
      });
  
      console.log("Zapisane menuIds:", menuIds);
  } else {
      console.log("Odpowiedź nie jest tablicą. Nie można zapisać menuIds.");
  }
  
}
