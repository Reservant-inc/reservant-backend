meta {
  name: -user_1
  type: http
  seq: 1
}

put {
  url: {{host}}/user
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "phoneNumber": "+48123456789",
    "firstName": "John",
    "lastName": "Doe",
    "birthDate": "1998-12-31",
    "photo": null
  }
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  test("Response body has correct structure", function () {
      const jsonData = res.getBody();
  
      // Sprawdzenie struktury podstawowej
      expect(jsonData).to.have.property('status').that.equals(400);
      expect(jsonData).to.have.property('errors').that.is.an('object');
  
      // Sprawdzenie struktury errors
      const errors = jsonData.errors;
      expect(errors).to.have.property('request').that.is.an('array').that.is.not.empty;
      expect(errors).to.have.property('$.phoneNumber').that.is.an('array').that.is.not.empty;
  
      // Sprawdzenie każdego błędu w "request"
      errors.request.forEach(error => {
          expect(error).to.be.a('string');
      });
  
      // Sprawdzenie każdego błędu w "$.phoneNumber"
      errors['$.phoneNumber'].forEach(error => {
          expect(error).to.be.a('string');
      });
  });
  
  test("Errors include specific messages", function () {
      const jsonData = res.getBody();
      const requestErrors = jsonData.errors.request;
      const phoneNumberErrors = jsonData.errors['$.phoneNumber'];
  
      // Sprawdzenie konkretnych komunikatów błędów
      expect(requestErrors).to.include("The request field is required.");
      expect(phoneNumberErrors).to.include(
          "The JSON value could not be converted to Reservant.Api.Models.PhoneNumber. Path: $.phoneNumber | LineNumber: 1 | BytePositionInLine: 31."
      );
  });
  
  test("Errors object keys are as expected", function () {
      const jsonData = res.getBody();
      const errorKeys = Object.keys(jsonData.errors);
  
      // Sprawdzenie, czy klucze w errors są zgodne z oczekiwanymi
      expect(errorKeys).to.have.members(['request', '$.phoneNumber']);
  });
  
  
}
