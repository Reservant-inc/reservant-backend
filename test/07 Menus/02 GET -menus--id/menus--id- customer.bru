meta {
  name: menus--id- customer
  type: http
  seq: 2
}

get {
  url: {{host}}/menus/:id
  body: none
  auth: bearer
}

params:path {
  id: {{randomMenuId}}
}

auth:bearer {
  token: {{customer}}
}

script:pre-request {
  // Pobieranie listy menuIds z środowiska
  var menuIds = JSON.parse(bru.getEnvVar("menuIds"));
  
  // Sprawdzenie, czy lista menuIds jest prawidłowa i zawiera elementy
  if (menuIds && Array.isArray(menuIds) && menuIds.length > 0) {
      // Losowanie jednego menuId z listy
      var randomIndex = Math.floor(Math.random() * menuIds.length);
      var randomMenuId = menuIds[randomIndex];
  
      // Zapisywanie wylosowanego menuId do środowiska
      bru.setEnvVar("randomMenuId", randomMenuId);
  
      console.log("Wylosowane menuId:", randomMenuId);
  } else {
      console.error("Lista menuIds jest pusta lub nie została znaleziona.");
  }
  
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Sprawdzenie, czy odpowiedź jest w formacie JSON
  test("Response is a valid JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // 3. Sprawdzenie struktury odpowiedzi
  test("Response structure is correct", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie podstawowych właściwości menu
      expect(jsonData).to.have.property('menuId').that.is.a('number');
      expect(jsonData).to.have.property('name').that.is.a('string');
      expect(jsonData).to.have.property('menuType').that.is.a('string');
      expect(jsonData).to.have.property('dateFrom').that.is.a('string');
      expect(jsonData).to.have.property('photo').that.is.a('string');
      
      // Sprawdzenie listy pozycji menu (menuItems)
      expect(jsonData).to.have.property('menuItems').that.is.an('array');
      expect(jsonData.menuItems.length).to.be.above(0);
      
      jsonData.menuItems.forEach(function(item) {
          expect(item).to.have.property('menuItemId').that.is.a('number');
          expect(item).to.have.property('price').that.is.a('number');
          expect(item).to.have.property('name').that.is.a('string');
          expect(item).to.have.property('photo').that.is.a('string');
          
          // Dodatkowe sprawdzenia mogą być dodane tutaj
          expect(item).to.have.property('alternateName');
          expect(item).to.have.property('alcoholPercentage');
      });
  });
  
  
  // 4. Sprawdzenie, czy wszystkie elementy `menuItems` mają poprawny format
  test("All 'menuItems' have correct structure", function () {
      var jsonData = res.getBody();
      jsonData.menuItems.forEach(function(item) {
          expect(item).to.have.property('menuItemId').that.is.a('number');
          expect(item).to.have.property('price').that.is.a('number');
          expect(item).to.have.property('name').that.is.a('string');
          expect(item).to.have.property('photo').that.is.a('string');
      });
  });
  
}
