meta {
  name: -user_1
  type: http
  seq: 3
}

put {
  url: {{host}}/user
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "phoneNumber": "+48123456789",
    "firstName": "John",
    "lastName": "Doe",
    "birthDate": "1998-12-31",
    "photo": null
  }
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  test("Response body has correct structure and data types", function () {
      const jsonData = res.getBody();
  
      expect(jsonData).to.have.property('userId').that.is.a('string');
      expect(jsonData).to.have.property('login').that.is.a('string');
      expect(jsonData).to.have.property('email').that.is.a('string');
      expect(jsonData).to.have.property('phoneNumber').that.is.a('string');
      expect(jsonData).to.have.property('firstName').that.is.a('string');
      expect(jsonData).to.have.property('lastName').that.is.a('string');
      expect(jsonData).to.have.property('registeredAt').that.is.a('string');
      expect(jsonData).to.have.property('birthDate').that.is.a('string');
      expect(jsonData).to.have.property('roles').that.is.an('array');
  
      jsonData.roles.forEach(role => {
          expect(role).to.be.a('string');
      });
  
      expect(jsonData).to.have.property('employerId').that.is.null;
      expect(jsonData).to.have.property('photo');
      if (jsonData.photo !== null) {
          expect(jsonData.photo).to.be.a('string');}
  });
  
}
