meta {
  name: -user-visits
  type: http
  seq: 1
}

get {
  url: {{host}}/user/visits
  body: none
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  test("Response body has correct structure", function () {
      const jsonData = res.getBody();
  
      // Sprawdzenie podstawowych pól
      expect(jsonData).to.have.property('page').that.is.a('number');
      expect(jsonData).to.have.property('totalPages').that.is.a('number');
      expect(jsonData).to.have.property('perPage').that.is.a('number');
      expect(jsonData).to.have.property('orderByOptions').that.is.an('array');
      expect(jsonData).to.have.property('items').that.is.an('array');
  });
  
  test("Page and pagination values are non-negative", function () {
      const jsonData = res.getBody();
  
      // Sprawdzenie, czy wartości są nieujemne
      expect(jsonData.page).to.be.at.least(0);
      expect(jsonData.totalPages).to.be.at.least(0);
      expect(jsonData.perPage).to.be.at.least(0);
  });
  
  test("Order by options are valid", function () {
      const jsonData = res.getBody();
  
      // Weryfikacja, że każda opcja w "orderByOptions" jest stringiem
      jsonData.orderByOptions.forEach(option => {
          expect(option).to.be.a('string');
      });
  });
  
  test("Pagination is consistent with items", function () {
      const jsonData = res.getBody();
  
      if (jsonData.totalPages === 0) {
          expect(jsonData.items).to.be.an('array').that.is.empty;
      }
  
      // Jeśli totalPages > 0, items niekoniecznie musi być puste (do sprawdzenia w innych scenariuszach)
  });
}
