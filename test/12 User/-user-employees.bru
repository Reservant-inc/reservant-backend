meta {
  name: -user-employees
  type: http
  seq: 1
}

get {
  url: {{host}}/user/employees
  body: none
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is JSON", function () {
  //     pm.response.to.be.json;
  });
  
  test("Response body has correct structure", function () {
      const jsonData = res.getBody();
  
      expect(jsonData).to.be.an('array').that.is.not.empty;
  
      jsonData.forEach((user) => {
          expect(user).to.have.property('userId').that.is.a('string');
          expect(user).to.have.property('login').that.is.a('string');
          expect(user).to.have.property('firstName').that.is.a('string');
          expect(user).to.have.property('lastName').that.is.a('string');
          expect(user).to.have.property('birthDate').that.is.a('string');
          expect(user).to.have.property('phoneNumber').that.is.a('string');
          expect(user).to.have.property('employments').that.is.an('array').that.is.not.empty;
  
          user.employments.forEach((employment) => {
              expect(employment).to.have.property('employmentId').that.is.a('number');
              expect(employment).to.have.property('restaurantId').that.is.a('number');
              expect(employment).to.have.property('isBackdoorEmployee').that.is.a('boolean');
              expect(employment).to.have.property('isHallEmployee').that.is.a('boolean');
              expect(employment).to.have.property('restaurantName').that.is.a('string');
              expect(employment).to.have.property('dateFrom').that.is.a('string');
          });
      });
  });
  
}
