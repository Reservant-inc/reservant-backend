meta {
  name: -id--employees restaurant not found
  type: http
  seq: 7
}

get {
  url: {{host}}/my-restaurants/:id/employees
  body: none
  auth: bearer
}

params:path {
  id: 999999999
}

auth:bearer {
  token: {{JD}}
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla nieznalezionej restauracji
  test("Status code is 400 when restaurant not found", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for 'restaurant not found'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla nieznalezionej restauracji
  test("Response contains error message for 'restaurant not found'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu
      expect(jsonData.errors[""]).to.be.an('array').that.includes("Restaurant with ID 999999999 not found");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu dla nieznalezionej restauracji
  test("Response contains error code 'NotFound'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu
      expect(jsonData.errorCodes[""]).to.be.an('array').that.includes("NotFound");
  });
  
}
