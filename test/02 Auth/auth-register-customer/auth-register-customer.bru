meta {
  name: auth-register-customer
  type: http
  seq: 1
}

post {
  url: {{host}}/auth/register-customer
  body: json
  auth: none
}

body:json {
  {
    "firstName": "{{randomFirstName}}",
    "lastName": "{{randomLastName}}",
    "login": "{{randomLogin}}",
    "email": "{{randomEmail}}",
    "phoneNumber": "{{randomPhoneNumber}}",
    "birthDate": "{{randomBirthDate}}",
    "password": "{{randomPassword}}"
  }
}

tests {
  // Test to check if the status code is 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // Test to check if the response has a JSON body
  test("Response has a JSON body", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // Parsing the request and response body
  var requestData = req.getBody();
  var responseData = res.getBody();
  
  // Check that each expected field is present and non-empty
  test("firstName is present and not empty", function () {
      expect(requestData).to.have.property('firstName');
      expect(requestData.firstName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("lastName is present and not empty", function () {
      expect(requestData).to.have.property('lastName');
      expect(requestData.lastName).to.be.a('string').and.to.not.be.empty;
  });
  
  test("login is present and not empty", function () {
      expect(requestData).to.have.property('login');
      expect(requestData.login).to.be.a('string').and.to.not.be.empty;
  });
  
  test("Email is present and not empty", function () {
      expect(requestData).to.have.property('email');
      expect(requestData.email).to.be.a('string').and.to.not.be.empty;
  });
  
  test("phoneNumber is present and valid", function () {
      expect(requestData).to.have.property('phoneNumber');
      expect(requestData.phoneNumber).to.be.a('string').and.to.not.be.empty;
      expect(Number(requestData.phoneNumber)).to.be.a('number');
  });
  
  test("birthDate is present and valid", function () {
      expect(requestData).to.have.property('birthDate');
      expect(requestData.birthDate).to.be.a('string').and.to.not.be.empty;
      // Dodatkowa walidacja formatu daty mogłaby być dodana tutaj
  });
  
  test("Password is present and not empty", function () {
      expect(requestData).to.have.property('password');
      expect(requestData.password).to.be.a('string').and.to.not.be.empty;
  });
  
  // Validate that the response data structure matches the request data structure
  test("Response structure is valid", function () {
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'userId'
      expect(responseData).to.have.property('userId');
      expect(responseData.userId).to.be.a('string');
  
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'login'
      expect(responseData).to.have.property('login');
      expect(responseData.login).to.be.a('string');
  
      // Sprawdzamy, czy odpowiedź zawiera właściwość 'roles'
      expect(responseData).to.have.property('roles');
      expect(responseData.roles).to.be.an('array');
  
      // Sprawdzenie, czy tablica 'roles' zawiera odpowiednią rolę 'Customer'
      expect(responseData.roles).to.have.members(["Customer"]);
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  var sentData = req.body?.Data;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
