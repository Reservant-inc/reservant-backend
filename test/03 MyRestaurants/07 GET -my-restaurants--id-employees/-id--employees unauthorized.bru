meta {
  name: -id--employees unauthorized
  type: http
  seq: 2
}

get {
  url: {{host}}/my-restaurants/:id/employees
  body: none
  auth: bearer
}

params:path {
  id: {{firstRestaurantId}}
}

auth:bearer {
  token: {{PA}}
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla dostępu do restauracji, która nie należy do użytkownika
  test("Status code is 400 when accessing a restaurant not owned by the current user", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements for access denial", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla nieautoryzowanego dostępu
  test("Response contains error message for unauthorized access to restaurant", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu
      expect(jsonData.errors[""]).to.be.an('array').that.satisfies(errors => 
          errors.some(error => error.includes("not owned by the current user"))
      );
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu dla nieautoryzowanego dostępu
  test("Response contains error code 'AccessDenied'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu
      expect(jsonData.errorCodes[""]).to.be.an('array').that.includes("AccessDenied");
  });
  
}
