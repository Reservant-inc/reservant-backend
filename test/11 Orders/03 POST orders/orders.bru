meta {
  name: orders
  type: http
  seq: 1
}

post {
  url: {{host}}/orders
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "visitId": 1,
    "note": "{{$randomAdjective}}",
    "items": [
      {
        "menuItemId": {{randomNumber05}},
        "amount": {{randomNumber05}}
      }
    ]
  }
}

script:pre-request {
  function generateRandomNumber05() {
      return Math.floor(Math.random() * 6)+1;
  }
  var randomNumber05 = generateRandomNumber05();
  bru.setEnvVar("randomNumber05", randomNumber05);
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  
  test("Response is not empty", function () {
      expect(res.getBody()?.toString()).not.to.be.empty;
  });
  
  test("Response has a JSON body", function () {
  //     expect(pm.response.headers.get("Content-Type")).to.include("application/json");
  });
  
  const response = res.getBody();
  test("Response has correct output types", function () {
      expect(response).to.have.property("orderId").that.is.a("number");
      expect(response).to.have.property("visitId").that.is.a("number");
      expect(response).to.have.property("date").that.is.a("string");
      expect(response).to.have.property("note").that.is.a("string");
      expect(response).to.have.property("cost").that.is.a("number");
      expect(response).to.have.property("status").that.is.a("string");
  });
  
}
