meta {
  name: Invalid Price
  type: http
  seq: 7
}

put {
  url: {{host}}/menu-items/:id
  body: json
  auth: bearer
}

params:path {
  id: {{newMenuItemId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "price": "invalid_price", 
    "name": "{{menuName}}",
    "alternateName": "{{menuName}}",
    "alcoholPercentage": {{randomDouble0to3}},
    "photo": "test-jd.png",
      "ingredients": []
  }
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 for invalid menuItemId and incorrect price format", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'errors' i odpowiednie komunikaty błędów
  test("Error response contains messages for missing menuItemId and invalid price format", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie błędu dla braku pola 'request'
      expect(jsonData.errors).to.have.property('request');
      expect(jsonData.errors.request[0]).to.include("The request field is required.");
      
      // Sprawdzenie błędu dla pustego 'menuItemId'
      expect(jsonData.errors).to.have.property('menuItemId');
      
      // Sprawdzenie błędu konwersji 'price' do typu Decimal
      expect(jsonData.errors).to.have.property('$.price');
      expect(jsonData.errors["$.price"][0]).to.include("The JSON value could not be converted to System.Decimal");
  });
  
}
