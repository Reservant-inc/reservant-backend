meta {
  name: -menu-items NamesErr
  type: http
  seq: 10
}

post {
  url: {{host}}/menu-items
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "restaurantId": {{firstRestaurantId}},
    "price": {{randomInt}},
    "alternateName": "{{menuName}}",
    "alcoholPercentage": {{randomDouble0to3}},
    "photo": "test-jd.png",
    "ingredients": []
  }
  
}

script:pre-request {
  function generateRandomNumber010() {
      return Math.floor(Math.random() * 11);
  }
  var randomNumber010 = generateRandomNumber010();
  bru.setEnvVar("randomNumber010", randomNumber010);
  
  function getRandomMenuName() {
      var menuNames = ["seafood", "burger", "sushi", "kebab","pasta","pizza"];
      var randomIndex = Math.floor(Math.random() * menuNames.length);
      return menuNames[randomIndex];
  }
  
  var randomMenuName = getRandomMenuName();
  bru.setEnvVar("menuName", randomMenuName);
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 when 'name' and 'menuItem' are missing", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'errors' i odpowiednie komunikaty błędów
  test("Error response contains messages for missing 'name' and 'menuItem' fields", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie błędu deserializacji dla braku pola 'name'
      expect(jsonData.errors).to.have.property('$');
      expect(jsonData.errors['$'][0]).to.include("JSON deserialization for type 'Reservant.Api.Dtos.MenuItem.CreateMenuItemRequest' was missing required properties, including the following: name");
  
      // Sprawdzenie błędu dla braku pola 'menuItem'
      expect(jsonData.errors).to.have.property('menuItem');
      expect(jsonData.errors.menuItem[0]).to.include("The menuItem field is required.");
  });
  
}
