meta {
  name: auth-register-restaurant-employee phone error
  type: http
  seq: 5
}

post {
  url: {{host}}/auth/register-restaurant-employee
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "login": "{{$randomUserName}}",  // Login jest generowany losowo
    "firstName": "John",
    "lastName": "Doe",
    "phoneNumber": "123abc456",  // `phoneNumber` zawiera litery zamiast tylko cyfr
    "birthDate": "1990-01-01",
    "password": "Pa$$w0rd123"
  }
  
}

script:pre-request {
  function generateRandomNumberSequence(length) {
      let result = '';
      for (let i = 0; i < length; i++) {
          result += Math.floor(Math.random() * 10); 
      }
      return result;
  }
  
  function generateFormattedDate() {
      const today = new Date();
      const year = today.getFullYear();
      const month = ('0' + (today.getMonth() + 1)).slice(-2);
      const day = ('0' + today.getDate()).slice(-2); 
      return `${year}-${month}-${day}`;
  }
  const formattedDate = generateFormattedDate();
  bru.setEnvVar("formattedDate", formattedDate);
  
  
  
  
  //old
  const randomNumbers = generateRandomNumberSequence(9);
  bru.setEnvVar("randomPhoneNumber", randomNumbers);
  
  function generateRandomString(length, chars) {
      let result = '';
      for (let i = 0; i < length; i++) {
          result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
  }
  
  const randomLogin = generateRandomString(8, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
  const randomFirstName = generateRandomString(6, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
  const randomLastName = generateRandomString(6, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
  const randomPhoneNumber = Math.floor(Math.random() * 900000000) + 100000000;
  const specialCharacters = '!@#$%^&*()_+[]{}|;:,.<>?';
  const upperCase = generateRandomString(1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
  const lowerCase = generateRandomString(6, 'abcdefghijklmnopqrstuvwxyz');
  const number = generateRandomString(1, '0123456789');
  const specialChar = generateRandomString(1, specialCharacters);
  const randomPassword = upperCase + lowerCase + number + specialChar + generateRandomString(3, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
  
  bru.setVar("random_login", randomLogin);
  bru.setVar("random_firstName", randomFirstName);
  bru.setVar("random_lastName", randomLastName);
  bru.setVar("random_phoneNumber", randomPhoneNumber);
  bru.setVar("random_password", randomPassword);
  
  const employeeData = {
      login: randomLogin,
      firstName: randomFirstName,
      lastName: randomLastName,
      phoneNumber: randomPhoneNumber.toString(),
      password: randomPassword
  };
  
  bru.setVar("employee_data", JSON.stringify(employeeData));
}

tests {
  // Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status' i 'errors'
  test("Error response contains required elements", function () {
      var jsonData = res.getBody();
      expect(jsonData).to.have.property('status');
      expect(jsonData).to.have.property('errors');
  });
  
  // Test sprawdzający, czy 'phoneNumber' zawiera niepoprawne dane i zwraca odpowiedni błąd
  test("phoneNumber must be a valid number", function () {
      var responseData = res.getBody();
  
      expect(responseData.errors).to.have.property('phoneNumber');
      expect(responseData.errors.phoneNumber[0]).to.include("The PhoneNumber field is not a valid phone number.");
  });
  
  // Sprawdzenie, czy dane odpowiedzi są zgodne z danymi żądania (dla poprawnych danych)
  var jsonData = res.getBody();
  // var sentData = pm.request.body ? JSON.parse(pm.request.body).Data : null;
  
  test("Response data matches request data", function () {
      expect(jsonData.Data).to.eql(sentData);
  });
  
}
