meta {
  name: menus--id- missing name
  type: http
  seq: 13
}

put {
  url: {{host}}/menus/:menuId
  body: json
  auth: bearer
}

params:path {
  menuId: {{randomMenuId}}
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "name": "",
    "alternateName": "{{$randomStreetName}}",
    "menuType": "{{randomMenuType}}",
    "dateFrom": "{{formattedDate}}",
    "dateUntil": "{{randomFutureDate}}",
     "photo": "test-jd.png"
  }
}

script:pre-request {
  // Pobieranie listy menuIds z środowiska
  var menuIds = JSON.parse(bru.getEnvVar("menuIds"));
  
  // Sprawdzenie, czy lista menuIds jest prawidłowa i zawiera elementy
  if (menuIds && Array.isArray(menuIds) && menuIds.length > 0) {
      // Losowanie jednego menuId z listy
      var randomIndex = Math.floor(Math.random() * menuIds.length);
      var randomMenuId = menuIds[randomIndex];
  
      // Zapisywanie wylosowanego menuId do środowiska
      bru.setEnvVar("randomMenuId", randomMenuId);
  
      console.log("Wylosowane menuId:", randomMenuId);
  } else {
      console.error("Lista menuIds jest pusta lub nie została znaleziona.");
  }
  
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 400
  test("Status code is 400 for missing 'name' field", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // 2. Sprawdzenie, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for missing 'name' field", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors).to.have.property('name');
      expect(jsonData.errors).to.have.property('menuId');
  });
  
  // 3. Sprawdzenie, czy odpowiedź zawiera odpowiedni błąd dla brakującego pola 'name'
  test("Response contains error message for missing 'name' field", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla brakującego pola 'name'
      expect(jsonData.errors.name[0]).to.include("The Name field is required.");
  });
  
  // 4. Sprawdzenie, czy `menuId` jest wymieniony w odpowiedzi, nawet jeśli nie ma przypisanego błędu
  test("'menuId' is present in the error response", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'menuId' istnieje w odpowiedzi 'errors'
      expect(jsonData.errors).to.have.property('menuId');
  });
  
}
