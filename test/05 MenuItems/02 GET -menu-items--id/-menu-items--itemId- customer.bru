meta {
  name: -menu-items--itemId- customer
  type: http
  seq: 2
}

get {
  url: {{host}}/menu-items/:id
  body: none
  auth: bearer
}

params:path {
  id: {{randomMenuItemId}}
}

auth:bearer {
  token: {{customer}}
}

script:pre-request {
  // Pobranie listy 'menuItemIdsList' ze zmiennych środowiskowych
  let menuItemIdsList = bru.getEnvVar("menuItemIdsList");
  
  // Sprawdzenie, czy lista istnieje
  if (menuItemIdsList) {
      // Parsowanie listy ze stringa JSON na tablicę
      menuItemIdsList = JSON.parse(menuItemIdsList);
      
      // Sprawdzenie, czy lista nie jest pusta
      if (menuItemIdsList.length > 0) {
          // Losowanie indeksu
          const randomIndex = Math.floor(Math.random() * menuItemIdsList.length);
          
          // Pobranie losowego 'menuItemId' z listy
          const randomMenuItemId = menuItemIdsList[randomIndex];
          
          // Zapisanie losowego 'menuItemId' do zmiennej środowiskowej
          bru.setEnvVar("randomMenuItemId", randomMenuItemId);
          console.log("Randomly selected menuItemId:", randomMenuItemId);
      } else {
          console.log("MenuItemIdsList is empty.");
      }
  } else {
      console.log("MenuItemIdsList does not exist.");
  }
  
}

tests {
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is not empty", function () {
      expect(res.getBody()?.toString()).not.to.be.empty;
  });
  
  test("Response has a JSON body", function () {
  //     expect(pm.response.headers.get("Content-Type")).to.include("application/json");
  });
  
  const response = res.getBody();
  
  test("Response has correct output types", function () {
      expect(response).to.have.property("menuItemId").that.is.a("number");
      expect(response).to.have.property("price").that.is.a("number");
      expect(response).to.have.property("name").that.is.a("string");
      expect(response).to.have.property("alternateName");
      expect(response.alternateName === null || typeof response.alternateName === 'string').to.be.true;
      expect(response).to.have.property("alcoholPercentage");
      expect(response.alcoholPercentage === null || typeof response.alcoholPercentage === 'number').to.be.true;
       expect(response).to.have.property("photo").that.is.a("string");
  });
  
  
  
  
  
  
  
  
  
  
  
}
