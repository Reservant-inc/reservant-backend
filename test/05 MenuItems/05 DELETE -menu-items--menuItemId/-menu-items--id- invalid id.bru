meta {
  name: -menu-items--id- invalid id
  type: http
  seq: 8
}

delete {
  url: {{host}}/menu-items/:menuItemId
  body: none
  auth: bearer
}

params:path {
  menuItemId: 0
}

auth:bearer {
  token: {{JD}}
}

script:pre-request {
  function generateRandomNumber010() {
      return Math.floor(Math.random() * 11);
  }
  var randomNumber010 = generateRandomNumber010();
  bru.setEnvVar("randomNumber010", randomNumber010);
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400
  test("Status code is 400 when the item is not found", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera pole 'errors' i odpowiedni komunikat błędu dla braku elementu
  test("Error response contains message for item not found", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie błędu dla braku elementu 'Item'
      expect(jsonData).to.have.property('errors');
      expect(jsonData.errors[''][0]).to.include("No item found.");
  });
  
}
