meta {
  name: -events--eventId-
  type: http
  seq: 1
}

put {
  url: {{host}}/events/:eventId
  body: json
  auth: bearer
}

params:path {
  eventId: 1
}

auth:bearer {
  token: {{JD}}
}

body:json {
  
  {
    "name": "{{randomCompanyName}}",
    "description": "{{groupName}}",
    "time": "{{time}}",
    "maxPeople": {{randomNumber010}},
    "mustJoinUntil": "{{mustJoinUntil}}",
    "restaurantId": 1,
    "photo": "test-jd.png"
  }
}

tests {
  // Pobierz odpowiedź z serwera jako obiekt JSON
  const responseBody = res.getBody();
  
  // Test: Odpowiedź zawiera wszystkie wymagane pola z odpowiednimi typami
  test("Response contains all required fields with correct types", function () {
      // Sprawdzenie statusu odpowiedzi
      expect(res.getStatus()).to.equal(200);
  
      // Walidacja głównych pól
      expect(responseBody).to.have.property("eventId").that.is.a("number");
      expect(responseBody).to.have.property("name").that.is.a("string");
      expect(responseBody).to.have.property("createdAt").that.is.a("string");
      expect(responseBody).to.have.property("description").that.is.a("string");
      expect(responseBody).to.have.property("time").that.is.a("string");
      expect(responseBody).to.have.property("maxPeople").that.is.a("number");
      expect(responseBody).to.have.property("mustJoinUntil").that.is.a("string");
      expect(responseBody).to.have.property("photo").that.is.a("string");
  
      // Walidacja pola 'creator'
      expect(responseBody).to.have.property("creator").that.is.an("object");
      const creator = responseBody.creator;
      expect(creator).to.have.property("userId").that.is.a("string");
      expect(creator).to.have.property("firstName").that.is.a("string");
      expect(creator).to.have.property("lastName").that.is.a("string");
      expect(creator).to.have.property("photo").that.is.a("string");
  
      // Walidacja pola 'restaurant'
      expect(responseBody).to.have.property("restaurant").that.is.an("object");
      const restaurant = responseBody.restaurant;
      expect(restaurant).to.have.property("restaurantId").that.is.a("number");
      expect(restaurant).to.have.property("name").that.is.a("string");
      expect(restaurant).to.have.property("restaurantType").that.is.a("string");
      expect(restaurant).to.have.property("address").that.is.a("string");
      expect(restaurant).to.have.property("city").that.is.a("string");
      expect(restaurant).to.have.property("location").that.is.an("object");
      expect(restaurant.location).to.have.property("latitude").that.is.a("number");
      expect(restaurant.location).to.have.property("longitude").that.is.a("number");
      expect(restaurant).to.have.property("logo").that.is.a("string");
      expect(restaurant).to.have.property("description").that.is.a("string");
      expect(restaurant).to.have.property("reservationDeposit").that.is.a("number");
      expect(restaurant).to.have.property("maxReservationDurationMinutes").that.is.a("number");
      expect(restaurant).to.have.property("provideDelivery").that.is.a("boolean");
      expect(restaurant).to.have.property("tags").that.is.an("array");
      expect(restaurant).to.have.property("rating").that.is.a("number");
      expect(restaurant).to.have.property("numberReviews").that.is.a("number");
      expect(restaurant).to.have.property("openingHours").that.is.an("array");
      expect(restaurant).to.have.property("isArchived").that.is.a("boolean");
  
      // Walidacja elementów w tablicy 'openingHours'
      restaurant.openingHours.forEach((hours, index) => {
          test(`Opening hours item at index ${index} is valid`, function () {
              expect(hours).to.have.property("from").that.is.a("string");
              expect(hours).to.have.property("until").that.is.a("string");
          });
      });
  
      // Walidacja pola 'visitId'
      expect(responseBody).to.have.property("visitId");
      expect(responseBody.visitId === null || typeof responseBody.visitId === "number").to.be.true;
  
      // Walidacja pola 'participants'
      expect(responseBody).to.have.property("participants").that.is.an("array");
      responseBody.participants.forEach((participant, index) => {
          test(`Participant at index ${index} has correct fields`, function () {
              expect(participant).to.have.property("userId").that.is.a("string");
              expect(participant).to.have.property("firstName").that.is.a("string");
              expect(participant).to.have.property("lastName").that.is.a("string");
              expect(participant).to.have.property("photo").that.is.a("string");
          });
      });
  });
  
}
