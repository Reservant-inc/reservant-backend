meta {
  name: -id--menus invalid restaurant
  type: http
  seq: 6
}

get {
  url: {{host}}/my-restaurants/:id/menus
  body: none
  auth: bearer
}

params:path {
  id: 0
}

auth:bearer {
  token: {{JD}}
}

tests {
  // Test sprawdzający, czy odpowiedź ma status 400 dla nieistniejącego id restauracji
  test("Status code is 400 when 'id' of the restaurant does not exist", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  // Test sprawdzający, czy odpowiedź zawiera wymagane elementy 'status', 'errors' i 'errorCodes'
  test("Error response contains required elements for non-existent 'id'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'status'
      expect(jsonData).to.have.property('status');
      expect(jsonData.status).to.eql(400);
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errors'
      expect(jsonData).to.have.property('errors');
      
      // Sprawdzenie, czy odpowiedź zawiera pole 'errorCodes'
      expect(jsonData).to.have.property('errorCodes');
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni błąd dla nieistniejącego 'id'
  test("Response contains error message for non-existent 'id'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errors' zawiera odpowiedni komunikat błędu dla 'id'
      expect(jsonData.errors).to.have.property('id');
      expect(jsonData.errors.id[0]).to.eql("Restaurant with ID 0 not found");
  });
  
  // Test sprawdzający, czy odpowiedź zawiera odpowiedni kod błędu 'NotFound' dla nieistniejącego 'id'
  test("Response contains error code 'NotFound' for non-existent 'id'", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie, czy pole 'errorCodes' zawiera odpowiedni kod błędu dla 'id'
      expect(jsonData.errorCodes).to.have.property('id');
      expect(jsonData.errorCodes.id[0]).to.eql("NotFound");
  });
  
}
