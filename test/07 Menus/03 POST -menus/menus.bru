meta {
  name: menus
  type: http
  seq: 1
}

post {
  url: {{host}}/menus
  body: json
  auth: bearer
}

auth:bearer {
  token: {{JD}}
}

body:json {
  {
    "restaurantId": {{firstRestaurantId}},
    "name": "{{randomCompanyName}}",
    "alternateName": "{{randomCompanyName}}",
    "menuType": "{{randomMenuType}}",
    "dateFrom": "{{formattedDate}}",
    "dateUntil": "{{randomFutureDate}}",
     "photo": "test-jd.png"
  }
}

tests {
  // 1. Sprawdzenie, czy odpowiedź ma status 200
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Sprawdzenie, czy odpowiedź jest w formacie JSON
  test("Response is a valid JSON", function () {
       res.getHeader('Content-Type', 'application/json');
  });
  
  // 3. Sprawdzenie struktury odpowiedzi
  test("Response contains all required fields with correct types", function () {
      var jsonData = res.getBody();
      
      // Sprawdzenie obecności i typu właściwości
      expect(jsonData).to.have.property('menuId').that.is.a('number');
      expect(jsonData).to.have.property('name').that.is.a('string');
      expect(jsonData).to.have.property('alternateName');
      expect(jsonData).to.have.property('menuType').that.is.a('string');
      expect(jsonData).to.have.property('dateFrom').that.is.a('string');
      expect(jsonData).to.have.property('dateUntil').that.is.a('string');
  });
  
  // 4. Sprawdzenie, czy `dateFrom` i `dateUntil` są datami w poprawnym formacie
  test("'dateFrom' and 'dateUntil' are valid dates", function () {
      var jsonData = res.getBody();
      
      // Konwersja do obiektów daty i sprawdzenie, czy są poprawnymi datami
      var dateFrom = new Date(jsonData.dateFrom);
      var dateUntil = new Date(jsonData.dateUntil);
      
      expect(!isNaN(dateFrom.getTime())).to.be.true;
      expect(!isNaN(dateUntil.getTime())).to.be.true;
  });
  
  // 5. Dodatkowe sprawdzenie dla `alternateName` i `photo`
  test("'alternateName' is either a string or null", function () {
      var jsonData = res.getBody();
      
      expect(jsonData.alternateName === null || typeof jsonData.alternateName === 'string').to.be.true;
  });
  
  
  
  // Parsowanie odpowiedzi JSON
  var jsonData = res.getBody();
  
  // Sprawdzenie, czy odpowiedź zawiera pole 'menuId'
  if (jsonData.hasOwnProperty('menuId')) {
      // Pobierz istniejącą listę menuIdsList ze zmiennych środowiskowych
      let menuIdsList = bru.getEnvVar("menuIdsList");
  
      if (menuIdsList) {
          // Jeśli lista istnieje, przekonwertuj ją z JSON na tablicę
          menuIdsList = JSON.parse(menuIdsList);
      } else {
          // Jeśli lista nie istnieje, utwórz nową tablicę
          menuIdsList = [];
      }
  
      // Dodaj nowe menuId do listy
      menuIdsList.push(jsonData.menuId);
  
      // Zapisz zaktualizowaną listę menuIdsList do zmiennych środowiskowych
      bru.setEnvVar("menuIdsList", JSON.stringify(menuIdsList));
      console.log("Zaktualizowana lista menuIdsList:", menuIdsList);
  } else {
      console.error("Odpowiedź nie zawiera 'menuId'.");
  }
  
  // Pobierz odpowiedź z serwera
  var jsonData = res.getBody();
  
  // Sprawdź, czy odpowiedź zawiera pole 'menuId'
  if (jsonData && jsonData.menuId) {
      // Pobierz menuId
      var menuToCheck = jsonData.menuId;
  
      // Zapisz do zmiennych środowiskowych Bruno
      bru.setEnvVar("menuToCheck", menuToCheck);
  
      console.log("Zapisano menuToCheck:", menuToCheck);
  } else {
      console.log("Brak menuId w odpowiedzi.");
  }
  
  
}
